<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SecurityNode</title>
  
  
  <link href="https://blog.ihacker.top/atom.xml" rel="self"/>
  
  <link href="https://blog.ihacker.top/"/>
  <updated>2024-10-31T09:29:55.747Z</updated>
  <id>https://blog.ihacker.top/</id>
  
  <author>
    <name>S.N.T</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MSF（Metasploit Framework）详细教程</title>
    <link href="https://blog.ihacker.top/archives/e316349cddf6.html"/>
    <id>https://blog.ihacker.top/archives/e316349cddf6.html</id>
    <published>2024-10-31T15:41:40.000Z</published>
    <updated>2024-10-31T09:29:55.747Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-简介"><a href="#一-简介" class="headerlink" title="一. 简介"></a>一. 简介</h1><p>Metasploit 是一个开源的渗透测试开源软件，也是一个逐步发展成熟的漏洞研究与渗透测试代码开发平台，此外也将成为支持整个渗透测试过程的安全技术集成开发与应用环境，2009年10月，Metasploit项目被一家渗透测试技术领域的知名安全公司Rapid7所收购。Rapid7公司随后与2010年10月推出了Metasploit Express 和Pro商业版本。</p><p><strong>优点：</strong>模块化，灵活框架，界面友好，简单易用，代码安全</p><h1 id="二-MSF-数据库操作"><a href="#二-MSF-数据库操作" class="headerlink" title="二. MSF 数据库操作"></a>二. MSF 数据库操作</h1><blockquote><p><code>msf init &amp;&amp; msfconsole</code> 初始化数据库并且启动msf<br>1.启动数据库（PostgreSQL ，端口5432）<br>2.初始化数据库<br>3.启动msf<br><code>msfconsole -q</code> 快速启动（不显示banner）<br><code>msfdb init</code>启动并初始化数据库<br><code>msfdb reinit</code> 重新初始数据库<br><code>msfdb delete</code> 删除数据库<br><code>msfdb start</code> 启动数据库<br><code>msfdb stop</code> 关闭数据库<br><code>msfdb status</code> 查看数据库状态<br><code>msfdb run</code> 启动数据库并启动msf</p></blockquote><p><strong>将PostgreSQL设置成开机自启</strong></p><blockquote><p>开启开机自启动：<code>systemctl enable postgresql</code><br>查看开启开机自启动的程序列表：<code>systemctl list-units --type=service</code></p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/MSF%EF%BC%88Metasploit%20Framework%EF%BC%89%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/01.png"                                     ></p><h1 id="三-MSF常用命令"><a href="#三-MSF常用命令" class="headerlink" title="三. MSF常用命令"></a>三. MSF常用命令</h1><h2 id="终端命令"><a href="#终端命令" class="headerlink" title="终端命令"></a>终端命令</h2><table><thead><tr><th align="center">命令</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">show exploits</td><td align="center">列出所有渗透攻击模块</td></tr><tr><td align="center">show payloads</td><td align="center">列出所有的攻击载荷</td></tr><tr><td align="center">show auxiliary</td><td align="center">列出所有的辅助模块</td></tr><tr><td align="center">search</td><td align="center">查询所有包含关键字的模块</td></tr><tr><td align="center">info</td><td align="center">展示出制定渗透攻击或模块的相关信息</td></tr><tr><td align="center">info -d</td><td align="center">更详细的信息（会打开网页文件显示）</td></tr><tr><td align="center">use</td><td align="center">装载一个模块</td></tr><tr><td align="center">LHOST</td><td align="center">目标主机</td></tr><tr><td align="center">RHOST</td><td align="center">远程主机或目标主机</td></tr><tr><td align="center">set</td><td align="center">设置配置参数</td></tr><tr><td align="center">setg</td><td align="center">设置配置全局参数</td></tr><tr><td align="center">unset</td><td align="center">取消配置参数</td></tr><tr><td align="center">unsetg</td><td align="center">取消配置全局参数</td></tr><tr><td align="center">show options</td><td align="center">列出当前模块中所有的参数配置</td></tr><tr><td align="center">show targets</td><td align="center">列出当前模块支持的平台</td></tr><tr><td align="center">set target num</td><td align="center">指定你所知道的目标的操作系统以及补丁版本类型</td></tr><tr><td align="center">set payload</td><td align="center">指定你想使用的攻击载荷（msf6是有默认的，msf5是需要指定的）</td></tr><tr><td align="center">show advanced</td><td align="center">列出所有高级配置选项</td></tr><tr><td align="center">check</td><td align="center">检测目标是否对选定的模块，存在相应的漏洞</td></tr><tr><td align="center">exploit</td><td align="center">执行渗透攻击模块</td></tr><tr><td align="center">exploit -j</td><td align="center">在计划任务下进行渗透攻击（攻击将在后台进行）</td></tr><tr><td align="center">exploit -z</td><td align="center">渗透攻击成功后不进行会话交互</td></tr><tr><td align="center">exploit -e &lt;编码方式&gt;</td><td align="center">指定攻击荷载的编码方式</td></tr><tr><td align="center">exploit -h</td><td align="center">列出exploit命令的帮助信息</td></tr><tr><td align="center">sessions -l</td><td align="center">列出可用的交互会话</td></tr><tr><td align="center">sessions -l -v</td><td align="center">列出所有可用的交互会话以及会话详细信息</td></tr><tr><td align="center">sessions -s &lt;脚本&gt;</td><td align="center">在所有活跃的meterpreter会话中运行一个特定的meterpreter脚本</td></tr><tr><td align="center">sessions -K</td><td align="center">杀死所有会话</td></tr><tr><td align="center">sessions -c &lt;命令&gt;</td><td align="center">在所有活跃的metaerprter会话上执行一个命令，如cmd</td></tr><tr><td align="center">sessions -u</td><td align="center">将指定的一个会话从win32shell升级到meterpeter shell</td></tr><tr><td align="center">sessions -i</td><td align="center">选着一个会话，到当前窗口运行</td></tr><tr><td align="center">db_create &lt;数据库名称&gt;</td><td align="center">创建一个数据库驱动攻击所需要的数据库</td></tr><tr><td align="center">db_nmap</td><td align="center">利用nmap并把所有扫描数据存入到数据库中</td></tr><tr><td align="center">db_autopwn -p -r -e</td><td align="center">对所有发现的开放端口执行db_autopwn，攻击所有系统，并使用一个反弹式shell</td></tr><tr><td align="center">db_destroy</td><td align="center">删除当前数据库</td></tr><tr><td align="center">db_nmap</td><td align="center">利用nmap并把所有扫描数据存入到数据库中</td></tr><tr><td align="center">db_destroy user:password@host:port&#x2F;database</td><td align="center">使用高级选项来删除数据库</td></tr></tbody></table><p><code>show exploits</code> 列出所有渗透攻击模块</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/MSF%EF%BC%88Metasploit%20Framework%EF%BC%89%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/02.png"                                     ></p><p><code>show payloads</code> 列出所有攻击载荷模块</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/MSF%EF%BC%88Metasploit%20Framework%EF%BC%89%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/03.png"                                     ></p><p><code>show auxiliary</code> 列出所有辅助模块</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/MSF%EF%BC%88Metasploit%20Framework%EF%BC%89%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/04.png"                                     ></p><p><code>search 17_010</code> 搜索关键字包含17_010 的（这里的17_010是指漏洞的时间）</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/MSF%EF%BC%88Metasploit%20Framework%EF%BC%89%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/05.png"                                     ></p><p><code>info</code> 查看当前模块的详细信息</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/MSF%EF%BC%88Metasploit%20Framework%EF%BC%89%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/06.png"                                     ></p><p>当前模块的更多详情详细</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/MSF%EF%BC%88Metasploit%20Framework%EF%BC%89%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/07.png"                                     ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/MSF%EF%BC%88Metasploit%20Framework%EF%BC%89%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/08.png"                                     ></p><p><code>use 0</code> 选择一个模块进行加载，这里的0是指序号，也可以用名称</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/MSF%EF%BC%88Metasploit%20Framework%EF%BC%89%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/09.png"                                     ></p><p><code>show options</code> 和 <code>options</code> 效果一样 列出当前模块的参数详细信息</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/MSF%EF%BC%88Metasploit%20Framework%EF%BC%89%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/10.png"                                     ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/MSF%EF%BC%88Metasploit%20Framework%EF%BC%89%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/11.png"                                     ></p><p><code>set rhosts 172.30.1.133</code> 设置RHOSTS(目标主机的IP地址)</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/MSF%EF%BC%88Metasploit%20Framework%EF%BC%89%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/12.png"                                     ></p><p><code>show targets</code> 列出当前模块支持的平台</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/MSF%EF%BC%88Metasploit%20Framework%EF%BC%89%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/13.png"                                     ></p><p><code>check</code> 检测目标对象是否存在对于模块的漏洞</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/MSF%EF%BC%88Metasploit%20Framework%EF%BC%89%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/14.png"                                     ></p><p><code>sessions -l 列出所有连接</code></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/MSF%EF%BC%88Metasploit%20Framework%EF%BC%89%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/15.png"                                     ></p><p><code>sessions -l -v</code> 列出所有连接并显示连接利用的信息详细</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/MSF%EF%BC%88Metasploit%20Framework%EF%BC%89%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/16.png"                                     ></p><p><code>show advanced</code> 显示模块的高级参数</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/MSF%EF%BC%88Metasploit%20Framework%EF%BC%89%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/17.png"                                     ></p><p><code>sessions -i 1 选择一个连接到前台</code></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/MSF%EF%BC%88Metasploit%20Framework%EF%BC%89%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/18.png"                                     ></p><h2 id="metapreter常用命令"><a href="#metapreter常用命令" class="headerlink" title="metapreter常用命令"></a>metapreter常用命令</h2><table><thead><tr><th align="center">命令</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">help</td><td align="center">打开帮助</td></tr><tr><td align="center">run &lt;脚本名称&gt;</td><td align="center">运行meterpreter脚本，在scripts&#x2F;meterpreter目录可查看到的所有脚本名称</td></tr><tr><td align="center">sysinfo</td><td align="center">列出受控主机的系统信息</td></tr><tr><td align="center">ls</td><td align="center">列出目标主机的文件和文件夹信息</td></tr><tr><td align="center">use priv</td><td align="center">加载权限提示控制模块，来扩展meterpreter</td></tr><tr><td align="center">ps</td><td align="center">显示所有运行进程及其关联的用户账户</td></tr><tr><td align="center">migrate PID</td><td align="center">迁移到指定的进程ID</td></tr><tr><td align="center">use incognito</td><td align="center">加载inconito功能（用来盗窃目标主机的令牌或者冒充用户）</td></tr><tr><td align="center">list_tokens -u</td><td align="center">列出目标主机用户组的可用令牌</td></tr><tr><td align="center">impersonate_token DOMAIN_NAME\USERNAME</td><td align="center">假冒目标主机上的可用令牌</td></tr><tr><td align="center">steal_token</td><td align="center">盗窃给定进程的可用令牌并进行令牌假冒</td></tr><tr><td align="center">drop_token</td><td align="center">停止假冒当前的令牌</td></tr><tr><td align="center">getsystem</td><td align="center">提供各种攻击向量来提示到系统用户权限</td></tr><tr><td align="center">shell</td><td align="center">以所有可用令牌来运行一个交互的shell</td></tr><tr><td align="center">execut -f com.exe -i</td><td align="center">执行cmd.exe命令交互</td></tr><tr><td align="center">execut -f com.exe -i -t</td><td align="center">以所有可用令牌来执行cmd命令</td></tr><tr><td align="center">execute -f cmd.exe -i -H -t</td><td align="center">以所有可用令牌来执行cmd命令并隐藏该进程</td></tr><tr><td align="center">rev2self</td><td align="center">回到控制目标主机的初始用户账户下</td></tr><tr><td align="center">reg command</td><td align="center">在目标主机注册表中进行交互，创建，删除和查询等操作</td></tr><tr><td align="center">setdesktop number</td><td align="center">切换到另一个用户界面（该功能基于那些用户已经登录）</td></tr><tr><td align="center">screenshot</td><td align="center">对目标主机进行截屏</td></tr><tr><td align="center">upload file</td><td align="center">向目标主机上传文件</td></tr><tr><td align="center">download file</td><td align="center">从目标主机上下载文件</td></tr><tr><td align="center">keyscan_dump</td><td align="center">储存目标主机上的键盘记录</td></tr><tr><td align="center">getprivs</td><td align="center">尽可能的获取到目标主机上的更多权限</td></tr><tr><td align="center">uietl enable keyboard&#x2F;mouse</td><td align="center">接管目标主机的键盘和鼠标</td></tr><tr><td align="center">background</td><td align="center">将当前会话放入后台运行</td></tr><tr><td align="center">use sniffer</td><td align="center">加入嗅探模块</td></tr><tr><td align="center">sniffer_interface</td><td align="center">列出目标主机上的所有开放网络接口</td></tr><tr><td align="center">sniffer_stats interfaceID pcapname</td><td align="center">在目标主机上启动嗅探</td></tr><tr><td align="center">sniffer_start interfaceID packet_buffer</td><td align="center">在目标主机上针对特定范围的数据包缓冲区启动嗅探</td></tr><tr><td align="center">sniffer_stats interfaceID</td><td align="center">获取正在实施嗅探网络接口的统计数据</td></tr><tr><td align="center">sniffer_stop interfaceID</td><td align="center">停止嗅探</td></tr><tr><td align="center">add_user username password -h ip</td><td align="center">在远程目标主机上添加一个用户</td></tr><tr><td align="center">add_group_user “Domain Adimins”username -h ip</td><td align="center">将用户添加到目标主机的域管理员组中</td></tr><tr><td align="center">clearev</td><td align="center">清除目标主机上的日志记录</td></tr><tr><td align="center">timestomp</td><td align="center">修改文件属性，例如修改文件的创建时间（反取证调差）</td></tr><tr><td align="center">reboot</td><td align="center">重启目标主机</td></tr></tbody></table><p><code>sysinfo</code> 列出当前被控制的主机的系统信息</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/MSF%EF%BC%88Metasploit%20Framework%EF%BC%89%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/19.png"                                     ></p><p><code>ls</code> 列出目标主机文件和文件夹</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/MSF%EF%BC%88Metasploit%20Framework%EF%BC%89%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/20.png"                                     ></p><p><code>ps</code> 显示所有运行进程及其关联的用户账户</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/MSF%EF%BC%88Metasploit%20Framework%EF%BC%89%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/21.png"                                     ></p><p><code>use incognito</code> 加载inconito功能（用来盗窃目标主机的令牌或者冒充用户）</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/MSF%EF%BC%88Metasploit%20Framework%EF%BC%89%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/22.png"                                     ></p><p><code>screenshot</code> 截取目标主机的屏幕</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/MSF%EF%BC%88Metasploit%20Framework%EF%BC%89%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/23.png"                                     ></p><p><code>shell</code> 获取一个交互shell</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/MSF%EF%BC%88Metasploit%20Framework%EF%BC%89%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/24.png"                                     ></p><h1 id="四-MSF-常用模块"><a href="#四-MSF-常用模块" class="headerlink" title="四. MSF 常用模块"></a>四. MSF 常用模块</h1><ol><li><strong>Exploits （渗透模块）</strong>： 这是一段程序，运行时会利用目标的安全漏洞进行攻击</li><li><strong>Payloads （攻击荷载模块）</strong>：在成功对目标完成一次渗透之后，这段程序开始在目标计算机上运行，它能帮助我们在目标系统上获取需要的访问和权限，创建后面和维护访问等。</li><li><strong>Auxiliary （辅助模块）</strong>：包含了一系列的辅助支持模块，包括扫描，fuzz（模块模糊）测试，漏洞发掘，检测模块，网络协议欺骗等模块。辅助是使Metasploit 更加灵活。</li><li>**Encoder (编码器模块)**：编码器模块通常用来对于攻击模块进行代码混淆，来逃过目标安全保护机制的检测。</li><li><strong>Meterpreter （内存攻击载荷）</strong>：是一种使用内存技术的攻击载荷，可以注入到程序之中，提供各种可以在目标上执行的功能，如开启摄像头，停用键盘等。</li><li><strong>Post （后渗透模块）</strong>：前提是已经拿到了目标系统的基本访问权限，可以使用post模块对系统进行进一步的渗透</li><li><strong>nop 模块</strong>：在汇编语音种，nop是指无操作指令，nop在编写exploit或shellcode时有时是有用的。添加nop可以显著帮助修改payload特征，从而绕过安全检测。</li></ol><blockquote><p>转自：<a class="link"   href="https://blog.csdn.net/qq_41245301/article/details/135065729" >https://blog.csdn.net/qq_41245301/article/details/135065729 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-简介&quot;&gt;&lt;a href=&quot;#一-简介&quot; class=&quot;headerlink&quot; title=&quot;一. 简介&quot;&gt;&lt;/a&gt;一. 简介&lt;/h1&gt;&lt;p&gt;Metasploit 是一个开源的渗透测试开源软件，也是一个逐步发展成熟的漏洞研究与渗透测试代码开发平台，此外也将成为支</summary>
      
    
    
    
    <category term="网络技术" scheme="https://blog.ihacker.top/categories/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="工具手册" scheme="https://blog.ihacker.top/tags/%E5%B7%A5%E5%85%B7%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>浅谈骇客是如何利用SPF机制进行邮件钓鱼的</title>
    <link href="https://blog.ihacker.top/archives/8fc0c4d921ce.html"/>
    <id>https://blog.ihacker.top/archives/8fc0c4d921ce.html</id>
    <published>2024-10-31T14:35:31.000Z</published>
    <updated>2024-10-31T09:29:55.747Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SPF介绍"><a href="#SPF介绍" class="headerlink" title="SPF介绍"></a>SPF介绍</h1><p>spf是一种用于防止电子邮件伪造得技术，旨在确保只有授权的发送者才能适用特定的域名发送电子邮件，它也是邮件系统的一种安全机制，它的内容被写入DNS的TXT类型记录中。通过SPF记录，域名所有者可以指定哪些IP地址或服务器被授权代表该域名发送电子邮件。</p><ol><li>防止伪造邮件地址：SPF通过验证发件人的IP地址是否被包含在SPF记录中，来防止他人伪造你的邮件地址发送垃圾邮件或进行网络钓鱼攻击。</li><li>提升邮件可信度：对于通过了SPF验证的邮件，接收邮件的服务器会将其视为更可信的邮件，从而提高邮件的送达率和打开率。</li><li>减少垃圾邮件：通过SPF验证，可以有效地过滤掉大量伪造邮件地址的垃圾邮件，减轻邮件服务器的负担。</li></ol><h2 id="判断是否使用了spf"><a href="#判断是否使用了spf" class="headerlink" title="判断是否使用了spf"></a>判断是否使用了spf</h2><p><strong>Windows：</strong></p><ol><li>输入<code>nslookup -type=txt 域名</code>命令，其中“域名”是你想要查询SPF记录的域名。例如，如果你的邮件地址是<a class="link"   href="mailto:&#49;&#101;&#120;&#97;&#109;&#112;&#x6c;&#101;&#64;&#116;&#x65;&#115;&#x74;&#x2e;&#x63;&#111;&#x6d;&#x31;" >&#49;&#101;&#120;&#97;&#109;&#112;&#x6c;&#101;&#64;&#116;&#x65;&#115;&#x74;&#x2e;&#x63;&#111;&#x6d;&#x31; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，那么你应该查询的域名就是1test.com1。</li><li>执行命令后，命令提示符会返回该域名的TXT记录，其中就包含了SPF记录（如果有的话）。SPF记录通常以1v&#x3D;spf11开头。</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/%E6%B5%85%E8%B0%88%E9%AA%87%E5%AE%A2%E6%98%AF%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8SPF%E6%9C%BA%E5%88%B6%E8%BF%9B%E8%A1%8C%E9%82%AE%E4%BB%B6%E9%92%93%E9%B1%BC%E7%9A%84/202407111514131.png"                                     ></p><p><strong>Linux：</strong><code>dig -t txt 域名</code></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/%E6%B5%85%E8%B0%88%E9%AA%87%E5%AE%A2%E6%98%AF%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8SPF%E6%9C%BA%E5%88%B6%E8%BF%9B%E8%A1%8C%E9%82%AE%E4%BB%B6%E9%92%93%E9%B1%BC%E7%9A%84/202407111614082.png"                                     ></p><h2 id="在线spf检查，工具示例"><a href="#在线spf检查，工具示例" class="headerlink" title="在线spf检查，工具示例"></a>在线spf检查，工具示例</h2><p><a class="link"   href="https://powerdmarc.com/zh/spf-record-lookup/" >https://powerdmarc.com/zh/spf-record-lookup/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/%E6%B5%85%E8%B0%88%E9%AA%87%E5%AE%A2%E6%98%AF%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8SPF%E6%9C%BA%E5%88%B6%E8%BF%9B%E8%A1%8C%E9%82%AE%E4%BB%B6%E9%92%93%E9%B1%BC%E7%9A%84/202407111626338.png"                                     ></p><h2 id="机制（Mechanisms）"><a href="#机制（Mechanisms）" class="headerlink" title="机制（Mechanisms）"></a>机制（Mechanisms）</h2><p>可以看到之前的图片的<code>v=xxxx include:xxx</code>，这些都是SPF记录通过一系列机制来指定哪些邮件服务器或IP地址被授权发送邮件的机制。以下是一些常用的机制：</p><ol><li><strong>include</strong></li></ol><ul><li>用途：允许一个SPF记录包含（引用）另一个域名的SPF记录。</li><li>示例：<code>include:spf.example.com</code></li></ul><ol start="2"><li><strong>a</strong></li></ol><ul><li>用途：根据域名的A记录（IPv4地址）来验证发件人IP地址。</li><li>示例：<code>a</code> 或 <code>a:example.com</code></li></ul><ol start="3"><li><strong>mx</strong></li></ol><ul><li>用途：根据域名的MX记录来验证发件人IP地址。MX记录通常指向接收邮件的服务器。</li><li>示例：<code>mx</code> 或 <code>mx:example.com</code></li></ul><ol start="4"><li><strong>ip4和ip6</strong></li></ol><ul><li>用途：直接指定IPv4或IPv6地址段，用于验证发件人IP地址。</li><li>示例：<code>ip4:192.0.2.0/24</code> 或 <code>ip6:2001:db8::/32</code></li></ul><ol start="5"><li><strong>ptr</strong></li></ol><ul><li>用途：较少使用，因为它依赖于反向DNS查找，这可能不够可靠。</li></ul><ol start="6"><li><strong>exist</strong></li></ol><ul><li>用途：验证指定的域名是否存在。这通常与其他机制结合使用。</li></ul><h2 id="修饰符（Modifiers）"><a href="#修饰符（Modifiers）" class="headerlink" title="修饰符（Modifiers）"></a>修饰符（Modifiers）</h2><p>SPF记录还可以包含修饰符，用于改变SPF检查的结果处理方式：</p><ul><li>+（pass）：表示SPF检查通过。</li><li>-（fail）：表示SPF检查失败。</li><li>~（softfail）：表示“软失败”，即SPF检查没有明确通过，但也没有完全失败。</li><li>?（neutral）：表示SPF记录对该IP地址没有明确的允许或拒绝立场。</li></ul><h2 id="终止符（all）"><a href="#终止符（all）" class="headerlink" title="终止符（all）"></a>终止符（all）</h2><p>用途：<code>all</code> 机制用于终止SPF记录，并指定默认的处理方式。<br>示例：<code>-all</code> 表示如果前面的机制都没有匹配，则视为SPF检查失败；<code>~all</code> 表示软失败；<code>?all</code> 表示中立。</p><p><strong>示例：</strong></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v=spf1 mx a:mail.example.com ip4:192.0.2.1/32 include:spf.anotherservice.com ~all</span><br></pre></td></tr></table></figure></div><p>SPF记录指定了多种机制和修饰符，包括使用MX记录、指定A记录、直接指定IPv4地址段、包含另一个域名的SPF记录，并以软失败作为默认处理方式。</p><h1 id="邮件钓鱼演练"><a href="#邮件钓鱼演练" class="headerlink" title="邮件钓鱼演练"></a>邮件钓鱼演练</h1><h2 id="无SPF攻击利用方式"><a href="#无SPF攻击利用方式" class="headerlink" title="无SPF攻击利用方式"></a>无SPF攻击利用方式</h2><p>这里推荐一个没有spf的邮箱网站便于演练</p><p><a class="link"   href="https://www.linshi-email.com/" >https://www.linshi-email.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><code>nslookup -type=txt iubridge.com</code>，对邮件系统的站点此时也没有</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/%E6%B5%85%E8%B0%88%E9%AA%87%E5%AE%A2%E6%98%AF%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8SPF%E6%9C%BA%E5%88%B6%E8%BF%9B%E8%A1%8C%E9%82%AE%E4%BB%B6%E9%92%93%E9%B1%BC%E7%9A%84/202407121437392.png"                                     ></p><p>使用 <code>nslookup -type=txt linshi-email.com</code> 对站点进行检测，也没有spf验证</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/%E6%B5%85%E8%B0%88%E9%AA%87%E5%AE%A2%E6%98%AF%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8SPF%E6%9C%BA%E5%88%B6%E8%BF%9B%E8%A1%8C%E9%82%AE%E4%BB%B6%E9%92%93%E9%B1%BC%E7%9A%84/202407111648386.png"                                     ></p><p>使用kali的swaks进行伪造发送邮件 ，由于该临时邮箱没有使用spf，所以可以直接使用该邮箱发送邮件</p><p><strong>命令举例：</strong></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swaks --to 10xxxxxxx9@qq.com（需要钓鱼的邮箱）  --from wangdun@iubridge.com（临时邮件）  --ehlo qq.com  --body &#x27;由于系统故障，导致密 码丢失，请 点击如下链接登录平台修改密码。https://xiaoyus.cc&#x27;  --header &quot;Subject: 系统故障&quot;</span><br></pre></td></tr></table></figure></div><p>其中</p><blockquote><p>–to &#x2F;&#x2F;收件人邮箱地址<br>–from <a class="link"   href="mailto:&#x74;&#101;&#115;&#116;&#x40;&#x71;&#x71;&#46;&#x63;&#111;&#109;" >&#x74;&#101;&#115;&#116;&#x40;&#x71;&#x71;&#46;&#x63;&#111;&#109; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> &#x2F;&#x2F;发件人邮箱；<br>–ehlo qq.com &#x2F;&#x2F;伪造邮件ehlo头，即是发件人邮箱的域名。提供身份认证，比如目标是qq邮箱，那么就是qq.com，目标是163那么就是163.com<br>–body “<a class="link"   href="http://www.baidu.com/" >http://www.baidu.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>“ &#x2F;&#x2F;引号中的内容即为邮件正文；<br>–header “Subject:hello” &#x2F;&#x2F;邮件头信息，subject为邮件标题<br>–data .&#x2F;Desktop&#x2F;email.txt &#x2F;&#x2F;将正常源邮件的内容保存成TXT文件，再作为正常邮件发送</p></blockquote><p>发送成功</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/%E6%B5%85%E8%B0%88%E9%AA%87%E5%AE%A2%E6%98%AF%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8SPF%E6%9C%BA%E5%88%B6%E8%BF%9B%E8%A1%8C%E9%82%AE%E4%BB%B6%E9%92%93%E9%B1%BC%E7%9A%84/202407112020619.png"                                     ></p><p>qq邮箱会提醒这个身份不安全（也可以绕过），此时你点击了这个链接，你就危险了</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/%E6%B5%85%E8%B0%88%E9%AA%87%E5%AE%A2%E6%98%AF%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8SPF%E6%9C%BA%E5%88%B6%E8%BF%9B%E8%A1%8C%E9%82%AE%E4%BB%B6%E9%92%93%E9%B1%BC%E7%9A%84/202407112013325.png"                                     ></p><p>163网易邮箱大师没有安全提示，各个厂商算法不同吧</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/%E6%B5%85%E8%B0%88%E9%AA%87%E5%AE%A2%E6%98%AF%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8SPF%E6%9C%BA%E5%88%B6%E8%BF%9B%E8%A1%8C%E9%82%AE%E4%BB%B6%E9%92%93%E9%B1%BC%E7%9A%84/202407112017905.png"                                     ></p><p><strong>Tips：添加附件</strong></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--attach   XX.docx</span><br></pre></td></tr></table></figure></div><h2 id="有SPF（绕过）"><a href="#有SPF（绕过）" class="headerlink" title="有SPF（绕过）"></a>有SPF（绕过）</h2><p>案例，使用<a class="link"   href="mailto:&#x78;&#120;&#x78;&#50;&#x33;&#x33;&#x33;&#x40;&#113;&#113;&#46;&#99;&#111;&#109;" >&#x78;&#120;&#x78;&#50;&#x33;&#x33;&#x33;&#x40;&#113;&#113;&#46;&#99;&#111;&#109; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> （临时qq邮箱）向对目标<a class="link"   href="mailto:&#120;&#120;&#120;&#120;&#x78;&#120;&#x39;&#57;&#57;&#x39;&#x40;&#49;&#x36;&#51;&#46;&#99;&#111;&#x6d;" >&#120;&#120;&#120;&#120;&#x78;&#120;&#x39;&#57;&#57;&#x39;&#x40;&#49;&#x36;&#51;&#46;&#99;&#111;&#x6d; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>进行钓鱼</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swaks --to xxxxxx9999@163.com  --from xxx2333@qq.com   --ehlo qq.com  --body &#x27;由于系统故障，导致密 码丢失，请点击如下链接登录平台修改密码。https://xiaoyus.cc&#x27;  --header &quot;Subject: 系统故障&quot;</span><br></pre></td></tr></table></figure></div><blockquote><p>–au : 使用这个参数指定你发送邮件的用户名（一般就是发送者的邮箱账号）<br>–ap : 你的授权码</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/%E6%B5%85%E8%B0%88%E9%AA%87%E5%AE%A2%E6%98%AF%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8SPF%E6%9C%BA%E5%88%B6%E8%BF%9B%E8%A1%8C%E9%82%AE%E4%BB%B6%E9%92%93%E9%B1%BC%E7%9A%84/202407121412466.png"                                     ></p><p>此时你就需要把你的钓鱼邮箱开启POP3&#x2F;SMTP服务，如下图</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/%E6%B5%85%E8%B0%88%E9%AA%87%E5%AE%A2%E6%98%AF%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8SPF%E6%9C%BA%E5%88%B6%E8%BF%9B%E8%A1%8C%E9%82%AE%E4%BB%B6%E9%92%93%E9%B1%BC%E7%9A%84/202407121413354.png"                                     ></p><p>注意开启这些服务之后会出现一个<strong>授权码</strong>，用到<code>-ap</code>参数，此时就可以进行发送了进行测试，payload如下：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swaks -from  xxxxxxx@163.com --body &#x27;this is a hacker email!&#x27; --to xxxxxx@qq.com --server smtp.163.com -p 25 -ap 你的密码/授权码 -au yxy350488@163.com</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/%E6%B5%85%E8%B0%88%E9%AA%87%E5%AE%A2%E6%98%AF%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8SPF%E6%9C%BA%E5%88%B6%E8%BF%9B%E8%A1%8C%E9%82%AE%E4%BB%B6%E9%92%93%E9%B1%BC%E7%9A%84/202407121418507.png"                                     ></p><p>发送成功，查看该邮件</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/%E6%B5%85%E8%B0%88%E9%AA%87%E5%AE%A2%E6%98%AF%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8SPF%E6%9C%BA%E5%88%B6%E8%BF%9B%E8%A1%8C%E9%82%AE%E4%BB%B6%E9%92%93%E9%B1%BC%E7%9A%84/202407121423982.png"                                     ></p><p>可见如果你泄露了自己的SMTP授权码，那么黑客就可以用这个授权码模拟你的qq&#x2F;163&#x2F;腾讯邮箱，这些有spf的官方邮箱对你进行邮件钓鱼，如果你点了这个链接，那么你就危险了</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/%E6%B5%85%E8%B0%88%E9%AA%87%E5%AE%A2%E6%98%AF%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8SPF%E6%9C%BA%E5%88%B6%E8%BF%9B%E8%A1%8C%E9%82%AE%E4%BB%B6%E9%92%93%E9%B1%BC%E7%9A%84/202407121429326.png"                                     ></p><p>下面是常见的邮件服务器</p><table><thead><tr><th align="center">发信邮箱</th><th align="center">服务器地址</th></tr></thead><tbody><tr><td align="center">qq &#x2F; foxmail</td><td align="center">smtp.qq.com:465</td></tr><tr><td align="center">网易</td><td align="center">POP3服务器: pop.126.com</td></tr><tr><td align="center">网易</td><td align="center">SMTP服务器: smtp.126.com:465</td></tr><tr><td align="center">网易</td><td align="center">IMAP服务器: imap.126.com</td></tr><tr><td align="center">新浪</td><td align="center">pop.sina.com</td></tr><tr><td align="center">新浪</td><td align="center">smtp.sina.com</td></tr><tr><td align="center">新浪</td><td align="center">imap.sina.com</td></tr><tr><td align="center">电信189</td><td align="center">smtp.189.cn:465</td></tr><tr><td align="center">电信21cn</td><td align="center">smtp.21cn.com:465</td></tr></tbody></table><h1 id="企业应该如何防护？"><a href="#企业应该如何防护？" class="headerlink" title="企业应该如何防护？"></a>企业应该如何防护？</h1><p>除了使用SPF等技术来防止伪造邮件外，还可以采取以下措施来防御钓鱼邮件：</p><ol><li>用户教育：教育员工识别钓鱼邮件的特征，如拼写错误、紧急请求、来自未知发件人的邮件等。</li><li>邮件网关安全：使用先进的邮件网关安全解决方案来过滤垃圾邮件和钓鱼邮件。</li><li>多因素身份验证：在关键账户上启用多因素身份验证，即使攻击者获得了用户的密码，他们仍然需要第二个验证因素才能访问账户。</li><li>安全软件：在终端设备上安装反病毒和反间谍软件，以防止恶意软件通过钓鱼邮件传播。</li></ol><h1 id="个人该如何防护？"><a href="#个人该如何防护？" class="headerlink" title="个人该如何防护？"></a>个人该如何防护？</h1><p>个人网络安全防护需提升安全意识，采用强密码并定期更换，保持系统及软件更新，警惕电子邮件风险，利用VPN保护公共网络下的数据传输，确保移动设备安全，定期备份并加密重要数据，同时重视物理安全，锁好设备并锁屏以防未授权访问。</p><h1 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明"></a>免责声明</h1><blockquote><p>本文所提供的信息、技术示例、操作指导及任何相关内容均旨在教育和分享目的，并不构成专业法律、技术或安全建议。本教程仅供钓鱼演练，请误对真实邮箱进行钓鱼，所造成的任何后果和法律责任，自行承担，与作者无关</p></blockquote><blockquote><p>转自：<a class="link"   href="https://www.cnblogs.com/xiaoyus/p/18418647#_label0" >https://www.cnblogs.com/xiaoyus/p/18418647#_label0 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SPF介绍&quot;&gt;&lt;a href=&quot;#SPF介绍&quot; class=&quot;headerlink&quot; title=&quot;SPF介绍&quot;&gt;&lt;/a&gt;SPF介绍&lt;/h1&gt;&lt;p&gt;spf是一种用于防止电子邮件伪造得技术，旨在确保只有授权的发送者才能适用特定的域名发送电子邮件，它也是邮件系统的一种</summary>
      
    
    
    
    <category term="网络技术" scheme="https://blog.ihacker.top/categories/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="邮件" scheme="https://blog.ihacker.top/tags/%E9%82%AE%E4%BB%B6/"/>
    
    <category term="SPF" scheme="https://blog.ihacker.top/tags/SPF/"/>
    
  </entry>
  
  <entry>
    <title>Nmap中文指导手册</title>
    <link href="https://blog.ihacker.top/archives/30e3509a41f9.html"/>
    <id>https://blog.ihacker.top/archives/30e3509a41f9.html</id>
    <published>2024-10-29T00:13:16.000Z</published>
    <updated>2024-10-31T09:29:55.747Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目标说明"><a href="#目标说明" class="headerlink" title="目标说明"></a>目标说明</h1><p>除了选项，所有出现在Nmap命令行上的都被视为对目标主机的说明。 最简单的情况是指定一个目标IP地址或主机名。</p><p>有时候您希望扫描整个网络的相邻主机。为此，Nmap支持CIDR风格的地址。您可以附加 一个<numbit>在一个IP地址或主机名后面， Nmap将会扫描所有和该参考IP地址具有 <numbit>相同比特的所有IP地址或主机。 例如，192.168.10.0&#x2F;24将会扫描192.168.10.0 (二进制格式: 11000000 10101000 00001010 00000000)和192.168.10.255 (二进制格式: 11000000 10101000 00001010 11111111)之间的256台主机。 192.168.10.40&#x2F;24 将会做同样的事情。假设主机 scanme.nmap.org的IP地址是205.217.153.62， scanme.nmap.org&#x2F;16 将扫描205.217.0.0和205.217.255.255之间的65,536 个IP地址。 所允许的最小值是&#x2F;1， 这将会扫描半个互联网。最大值是&#x2F;32，这将会扫描该主机或IP地址， 因为所有的比特都固定了。</p><p>CIDR标志位很简洁但有时候不够灵活。例如，您也许想要扫描 192.168.0.0&#x2F;16，但略过任何以.0或者.255 结束的IP地址，因为它们通常是广播地址。 Nmap通过八位字节地址范围支持这样的扫描 您可以用逗号分开的数字或范围列表为IP地址的每个八位字节指定它的范围。 例如，192.168.0-255.1-254 将略过在该范围内以.0和.255结束的地址。 范围不必限于最后的8位：0-255.0-255.13.37 将在整个互联网范围内扫描所有以13.37结束的地址。 这种大范围的扫描对互联网调查研究也许有用。</p><p>IPv6地址只能用规范的IPv6地址或主机名指定。 CIDR 和八位字节范围不支持IPv6，因为它们对于IPv6几乎没什么用。</p><p>Nmap命令行接受多个主机说明，它们不必是相同类型。命令nmap <a class="link"   href="https://link.zhihu.com/?target=http://scanme.nmap.org" >http://scanme.nmap.org <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 192.168.0.0&#x2F;8 10.0.0，1，3-7.0-255将和您预期的一样执行。</p><p>虽然目标通常在命令行指定，下列选项也可用来控制目标的选择：</p><h2 id="iL-从列表中输入"><a href="#iL-从列表中输入" class="headerlink" title="-iL  (从列表中输入)"></a>-iL <inputfilename> (从列表中输入)</h2><p>从 <inputfilename>中读取目标说明。在命令行输入 一堆主机名显得很笨拙，然而经常需要这样。 例如，您的DHCP服务器可能导出10,000个当前租约的列表，而您希望对它们进行 扫描。如果您不是使用未授权的静态IP来定位主机，或许您想要扫描所有IP地址。 只要生成要扫描的主机的列表，用-iL 把文件名作为选项传给Nmap。列表中的项可以是Nmap在 命令行上接受的任何格式(IP地址，主机名，CIDR，IPv6，或者八位字节范围)。 每一项必须以一个或多个空格，制表符或换行符分开。 如果您希望Nmap从标准输入而不是实际文件读取列表， 您可以用一个连字符(-)作为文件名。</p><h2 id="iR-随机选择目标"><a href="#iR-随机选择目标" class="headerlink" title="-iR  (随机选择目标)"></a>-iR <hostnum> (随机选择目标)</h2><p>对于互联网范围内的调查和研究， 您也许想随机地选择目标。 <hostnum> 选项告诉 Nmap生成多少个IP。不合需要的IP如特定的私有，组播或者未分配的地址自动 略过。选项 0 意味着永无休止的扫描。记住，一些网管对于未授权的扫描可能会很感冒并加以抱怨。 使用该选项的后果自负! 如果在某个雨天的下午，您觉得实在无聊， 试试这个命令nmap -sS -PS80 -iR 0 -p 80随机地找一些网站浏览。</p><h2 id="–exclude-排除主机-网络"><a href="#–exclude-排除主机-网络" class="headerlink" title="–exclude &lt;host1[，host2][，host3]，…&gt; (排除主机&#x2F;网络)"></a>–exclude &lt;host1[，host2][，host3]，…&gt; (排除主机&#x2F;网络)</h2><p>如果在您指定的扫描范围有一些主机或网络不是您的目标， 那就用该选项加上以逗号分隔的列表排除它们。该列表用正常的Nmap语法， 因此它可以包括主机名，CIDR，八位字节范围等等。 当您希望扫描的网络包含执行关键任务的服务器，已知的对端口扫描反应强烈的 系统或者被其它人看管的子网时，这也许有用。</p><h2 id="–excludefile-排除文件中的列表"><a href="#–excludefile-排除文件中的列表" class="headerlink" title="–excludefile  (排除文件中的列表)"></a>–excludefile <excludefile> (排除文件中的列表)</h2><p>这和–exclude 选项的功能一样，只是所排除的目标是用以 换行符，空格，或者制表符分隔的 <excludefile>提供的，而不是在命令行上输入的。</p><h1 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h1><p>任何网络探测任务的最初几个步骤之一就是把一组IP范围(有时该范围是巨大的)缩小为 一列活动的或者您感兴趣的主机。扫描每个IP的每个端口很慢，通常也没必要。 当然，什么样的主机令您感兴趣主要依赖于扫描的目的。网管也许只对运行特定服务的 主机感兴趣，而从事安全的人士则可能对一个马桶都感兴趣，只要它有IP地址:-)。一个系统管理员 也许仅仅使用Ping来定位内网上的主机，而一个外部入侵测试人员则可能绞尽脑汁用各种方法试图 突破防火墙的封锁。</p><p>由于主机发现的需求五花八门，Nmap提供了一箩筐的选项来定制您的需求。 主机发现有时候也叫做ping扫描，但它远远超越用世人皆知的ping工具 发送简单的ICMP回声请求报文。用户完全可以通过使用列表扫描(-sL)或者 通过关闭ping (-P0)跳过ping的步骤，也可以使用多个端口把TPC SYN&#x2F;ACK，UDP和ICMP 任意组合起来玩一玩。这些探测的目的是获得响应以显示某个IP地址是否是活动的(正在被某 主机或者网络设备使用)。 在许多网络上，在给定的时间，往往只有小部分的IP地址是活动的。 这种情况在基于RFC1918的<a class="link"   href="https://zhida.zhihu.com/search?content_id=120463183&content_type=Article&match_order=1&q=%E7%A7%81%E6%9C%89%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4&zhida_source=entity" >私有地址空间 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>如10.0.0.0&#x2F;8尤其普遍。 那个网络有16,000,000个IP，但我见过一些使用它的公司连1000台机器都没有。 主机发现能够找到零星分布于IP地址海洋上的那些机器。</p><p>如果没有给出主机发现的选项，Nmap 就发送一个TCP ACK报文到80端口和一个ICMP回声请求到每台目标机器。 一个例外是ARP扫描用于局域网上的任何目标机器。对于非特权UNIX shell用户，使用connect()系统调用会发送一个SYN报文而不是ACK 这些默认行为和使用-PA -PE选项的效果相同。 扫描局域网时，这种主机发现一般够用了，但是对于安全审核，建议进行 更加全面的探测。</p><p>-P<em>选项(用于选择 ping的类型)可以被结合使用。 您可以通过使用不同的TCP端口&#x2F;标志位和ICMP码发送许多探测报文 来增加穿透防守严密的防火墙的机会。另外要注意的是即使您指定了其它 -P</em>选项，ARP发现(-PR)对于局域网上的 目标而言是默认行为，因为它总是更快更有效。</p><p>下列选项控制主机发现：</p><h2 id="sL-列表扫描"><a href="#sL-列表扫描" class="headerlink" title="-sL (列表扫描)"></a>-sL (列表扫描)</h2><p>列表扫描是主机发现的退化形式，它仅仅列出指定网络上的每台主机， 不发送任何报文到目标主机。默认情况下，Nmap仍然对主机进行反向域名解析以获取 它们的名字。简单的主机名能给出的有用信息常常令人惊讶。例如， <a class="link"   href="https://link.zhihu.com/?target=http://fw.chi.playboy.com" >http://fw.chi.playboy.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>是花花公子芝加哥办公室的 防火墙。Nmap最后还会报告IP地址的总数。列表扫描可以很好的确保您拥有正确的目标IP。 如果主机的域名出乎您的意料，那么就值得进一步检查以防错误地扫描其它组织的网络。</p><p>既然只是打印目标主机的列表，像其它一些高级功能如端口扫描，操作系统探测或者Ping扫描 的选项就没有了。如果您希望关闭ping扫描而仍然执行这样的高级功能，请继续阅读关于 -P0选项的介绍。</p><h2 id="sP-Ping扫描"><a href="#sP-Ping扫描" class="headerlink" title="-sP (Ping扫描)"></a>-sP (Ping扫描)</h2><p>该选项告诉Nmap仅仅 进行ping扫描 (主机发现)，然后打印出对扫描做出响应的那些主机。 没有进一步的测试 (如端口扫描或者操作系统探测)。 这比列表扫描更积极，常常用于 和列表扫描相同的目的。它可以得到些许目标网络的信息而不被特别注意到。 对于攻击者来说，了解多少主机正在运行比列表扫描提供的一列IP和主机名往往更有价值。</p><p>系统管理员往往也很喜欢这个选项。 它可以很方便地得出 网络上有多少机器正在运行或者监视服务器是否正常运行。常常有人称它为 地毯式ping，它比ping广播地址更可靠，因为许多主机对广播请求不响应。</p><p>-sP选项在默认情况下， 发送一个ICMP回声请求和一个TCP报文到80端口。如果非特权用户执行，就发送一个SYN报文 (用connect()系统调用)到目标机的80端口。 当特权用户扫描局域网上的目标机时，会发送ARP请求(-PR)， ，除非使用了–send-ip选项。 -sP选项可以和除-P0)之外的任何发现探测类型-P* 选项结合使用以达到更大的灵活性。 一旦使用了任何探测类型和端口选项，默认的探测(ACK和回应请求)就被覆盖了。 当防守严密的防火墙位于运行Nmap的源主机和目标网络之间时， 推荐使用那些高级选项。否则，当防火墙捕获并丢弃探测包或者响应包时，一些主机就不能被探测到。</p><h2 id="P0-无ping"><a href="#P0-无ping" class="headerlink" title="-P0 (无ping)"></a>-P0 (无ping)</h2><p>该选项完全跳过Nmap发现阶段。 通常Nmap在进行高强度的扫描时用它确定正在运行的机器。 默认情况下，Nmap只对正在运行的主机进行高强度的探测如 端口扫描，版本探测，或者操作系统探测。用-P0禁止 主机发现会使Nmap对每一个指定的目标IP地址 进行所要求的扫描。所以如果在命令行指定一个B类目标地址空间(&#x2F;16)， 所有 65,536 个IP地址都会被扫描。 -P0的第二个字符是数字0而不是字母O。 和列表扫描一样，跳过正常的主机发现，但不是打印一个目标列表， 而是继续执行所要求的功能，就好像每个IP都是活动的。</p><h2 id="PS-portlist-TCP-SYN-Ping"><a href="#PS-portlist-TCP-SYN-Ping" class="headerlink" title="-PS [portlist] (TCP SYN Ping)"></a>-PS [portlist] (TCP SYN Ping)</h2><p>该选项发送一个设置了SYN标志位的空TCP报文。 默认目的端口为80 (可以通过改变nmap.h) 文件中的DEFAULT-TCP-PROBE-PORT值进行配置，但不同的端口也可以作为选项指定。 甚至可以指定一个以逗号分隔的端口列表(如 -PS22，23，25，80，113，1050，35000)， 在这种情况下，每个端口会被并发地扫描。</p><p>SYN标志位告诉对方您正试图建立一个连接。 通常目标端口是关闭的，一个RST (复位) 包会发回来。 如果碰巧端口是开放的，目标会进行TCP三步握手的第二步，回应 一个SYN&#x2F;ACK TCP报文。然后运行Nmap的机器则会扼杀这个正在建立的连接， 发送一个RST而非ACK报文，否则，一个完全的连接将会建立。 RST报文是运行Nmap的机器而不是Nmap本身响应的，因为它对收到 的SYN&#x2F;ACK感到很意外。</p><p>Nmap并不关心端口开放还是关闭。 无论RST还是SYN&#x2F;ACK响应都告诉Nmap该主机正在运行。</p><p>在UNIX机器上，通常只有特权用户 root 能否发送和接收 原始的TCP报文。因此作为一个变通的方法，对于非特权用户， Nmap会为每个目标主机进行系统调用connect()，它也会发送一个SYN 报文来尝试建立连接。如果connect()迅速返回成功或者一个ECONNREFUSED 失败，下面的TCP堆栈一定已经收到了一个SYN&#x2F;ACK或者RST，该主机将被 标志位为在运行。 如果连接超时了，该主机就标志位为down掉了。这种方法也用于IPv6 连接，因为Nmap目前还不支持原始的IPv6报文。</p><h2 id="PA-portlist-TCP-ACK-Ping"><a href="#PA-portlist-TCP-ACK-Ping" class="headerlink" title="-PA [portlist] (TCP ACK Ping)"></a>-PA [portlist] (TCP ACK Ping)</h2><p>TCP ACK ping和刚才讨论的SYN ping相当类似。 也许您已经猜到了，区别就是设置TCP的ACK标志位而不是SYN标志位。 ACK报文表示确认一个建立连接的尝试，但该连接尚未完全建立。 所以远程主机应该总是回应一个RST报文， 因为它们并没有发出过连接请求到运行Nmap的机器，如果它们正在运行的话。</p><p>-PA选项使用和SYN探测相同的默认端口(80)，也可以 用相同的格式指定目标端口列表。如果非特权用户尝试该功能， 或者指定的是IPv6目标，前面说过的connect()方法将被使用。 这个方法并不完美，因为它实际上发送的是SYN报文，而不是ACK报文。</p><p>提供SYN和ACK两种ping探测的原因是使通过防火墙的机会尽可能大。 许多管理员会配置他们的路由器或者其它简单的防火墙来封锁SYN报文，除非 连接目标是那些公开的服务器像公司网站或者邮件服务器。 这可以阻止其它进入组织的连接，同时也允许用户访问互联网。 这种无状态的方法几乎不占用防火墙&#x2F;路由器的资源，因而被硬件和软件过滤器 广泛支持。Linux Netfilter&#x2F;iptables 防火墙软件提供方便的 –syn选项来实现这种无状态的方法。 当这样的无状态防火墙规则存在时，发送到关闭目标端口的SYN ping探测 (-PS) 很可能被封锁。这种情况下，ACK探测格外有闪光点，因为它正好利用了 这样的规则。</p><p>另外一种常用的防火墙用有状态的规则来封锁非预期的报文。 这一特性已开始只存在于高端防火墙，但是这些年类它越来越普遍了。 Linux Netfilter&#x2F;iptables 通过 –state选项支持这一特性，它根据连接状态把报文 进行分类。SYN探测更有可能用于这样的系统，由于没头没脑的ACK报文 通常会被识别成伪造的而丢弃。解决这个两难的方法是通过即指定 -PS又指定-PA来即发送SYN又发送ACK。</p><h2 id="PU-portlist-UDP-Ping"><a href="#PU-portlist-UDP-Ping" class="headerlink" title="-PU [portlist] (UDP Ping)"></a>-PU [portlist] (UDP Ping)</h2><p>还有一个主机发现的选项是UDP ping，它发送一个空的(除非指定了–data-length UDP报文到给定的端口。端口列表的格式和前面讨论过的-PS和-PA选项还是一样。 如果不指定端口，默认是31338。该默认值可以通过在编译时改变nmap.h文件中的 DEFAULT-UDP-PROBE-PORT值进行配置。默认使用这样一个奇怪的端口是因为对开放端口 进行这种扫描一般都不受欢迎。</p><p>如果目标机器的端口是关闭的，UDP探测应该马上得到一个ICMP端口无法到达的回应报文。 这对于Nmap意味着该机器正在运行。 许多其它类型的ICMP错误，像主机&#x2F;网络无法到达或者TTL超时则表示down掉的或者不可到达的主机。 没有回应也被这样解释。如果到达一个开放的端口，大部分服务仅仅忽略这个 空报文而不做任何回应。这就是为什么默认探测端口是31338这样一个 极不可能被使用的端口。少数服务如chargen会响应一个空的UDP报文， 从而向Nmap表明该机器正在运行。</p><p>该扫描类型的主要优势是它可以穿越只过滤TCP的防火墙和过滤器。 例如。我曾经有过一个Linksys BEFW11S4无线宽带路由器。默认情况下， 该设备对外的网卡过滤所有TCP端口，但UDP探测仍然会引发一个端口不可到达 的消息，从而暴露了它自己。</p><h2 id="PE-PP-PM-ICMP-Ping-Types"><a href="#PE-PP-PM-ICMP-Ping-Types" class="headerlink" title="-PE; -PP; -PM (ICMP Ping Types)"></a>-PE; -PP; -PM (ICMP Ping Types)</h2><p>除了前面讨论的这些不常见的TCP和UDP主机发现类型， Nmap也能发送世人皆知的ping 程序所发送的报文。Nmap发送一个ICMP type 8 (回声请求)报文到目标IP地址， 期待从运行的主机得到一个type 0 (回声响应)报文。 对于网络探索者而言，不幸的是，许多主机和 防火墙现在封锁这些报文，而不是按期望的那样响应， 参见<a class="link"   href="https://link.zhihu.com/?target=http://www.rfc-editor.org/rfc/rfc1122.txt" >RFC 1122 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。因此，仅仅ICMP扫描对于互联网上的目标通常是不够的。 但对于系统管理员监视一个内部网络，它们可能是实际有效的途径。 使用-PE选项打开该回声请求功能。</p><p>虽然回声请求是标准的ICMP ping查询， Nmap并不止于此。ICMP标准 (<a class="link"   href="https://link.zhihu.com/?target=http://www.rfc-editor.org/rfc/rfc792.txt" >RFC 792 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)还规范了时间戳请求，信息请求 request，和地址掩码请求，它们的代码分别是13，15和17。 虽然这些查询的表面目的是获取信息如地址掩码和当前时间， 它们也可以很容易地用于主机发现。 很简单，回应的系统就是在运行的系统。Nmap目前没有实现信息请求报文， 因为它们还没有被广泛支持。RFC 1122 坚持 “主机不应该实现这些消息”。 时间戳和地址掩码查询可以分别用-PP和-PM选项发送。 时间戳响应(ICMP代码14)或者地址掩码响应(代码18)表示主机在运行。 当管理员特别封锁了回声请求报文而忘了其它ICMP查询可能用于 相同目的时，这两个查询可能很有价值。</p><h2 id="PR-ARP-Ping"><a href="#PR-ARP-Ping" class="headerlink" title="-PR (ARP Ping)"></a>-PR (ARP Ping)</h2><p>最常见的Nmap使用场景之一是扫描一个以太局域网。 在大部分局域网上，特别是那些使用基于 RFC1918私有地址范围的网络，在一个给定的时间绝大部分 IP地址都是不使用的。 当Nmap试图发送一个原始IP报文如ICMP回声请求时， 操作系统必须确定对应于目标IP的硬件 地址(ARP)，这样它才能把以太帧送往正确的地址。 这一般比较慢而且会有些问题，因为操作系统设计者认为一般不会在短时间内 对没有运行的机器作几百万次的ARP请求。</p><p>当进行ARP扫描时，Nmap用它优化的算法管理ARP请求。 当它收到响应时， Nmap甚至不需要担心基于IP的ping报文，既然它已经知道该主机正在运行了。 这使得ARP扫描比基于IP的扫描更快更可靠。 所以默认情况下，如果Nmap发现目标主机就在它所在的局域网上，它会进行ARP扫描。 即使指定了不同的ping类型(如 -PI或者 -PS) ，Nmap也会对任何相同局域网上的目标机使用ARP。 如果您真的不想要ARP扫描，指定 –send-ip。</p><h2 id="n-不用域名解析"><a href="#n-不用域名解析" class="headerlink" title="-n (不用域名解析)"></a>-n (不用域名解析)</h2><p>告诉Nmap 永不对它发现的活动IP地址进行<a class="link"   href="https://zhida.zhihu.com/search?content_id=120463183&content_type=Article&match_order=2&q=%E5%8F%8D%E5%90%91%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90&zhida_source=entity" >反向域名解析 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。 既然DNS一般比较慢，这可以让事情更快些。</p><h2 id="R-为所有目标解析域名"><a href="#R-为所有目标解析域名" class="headerlink" title="-R (为所有目标解析域名)"></a>-R (为所有目标解析域名)</h2><p>告诉Nmap 永远 对目标IP地址作反向域名解析。 一般只有当发现机器正在运行时才进行这项操作。</p><h2 id="–system-dns-使用系统域名解析器"><a href="#–system-dns-使用系统域名解析器" class="headerlink" title="–system-dns (使用系统域名解析器)"></a>–system-dns (使用系统域名解析器)</h2><p>默认情况下，Nmap通过直接发送查询到您的主机上配置的域名服务器 来解析域名。为了提高性能，许多请求 (一般几十个 ) 并发执行。如果您希望使用系统自带的解析器，就指定该选项 (通过getnameinfo()调用一次解析一个IP)。除非Nmap的DNS代码有bug–如果是这样，请联系我们。 一般不使用该选项，因为它慢多了。系统解析器总是用于IPv6扫描。</p><h1 id="端口扫描基础"><a href="#端口扫描基础" class="headerlink" title="端口扫描基础"></a>端口扫描基础</h1><p>虽然Nmap这些年来功能越来越多， 它也是从一个高效的端口扫描器开始的，并且那仍然是它的核心功能。 nmap <target>这个简单的命令扫描主机<target>上的超过 1660个TCP端口。 。许多传统的端口扫描器只列出所有端口是开放还是关闭的， Nmap的信息粒度比它们要细得多。 它把端口分成六个状态: open(开放的)， closed(关闭的)，filtered(被过滤的)， unfiltered(未被过滤的)， open|filtered(开放或者被过滤的)，或者 closed|filtered(关闭或者被过滤的)。</p><p>这些状态并非端口本身的性质，而是描述Nmap怎样看待它们。例如， 对于同样的目标机器的135&#x2F;tcp端口，从同网络扫描显示它是开放的，而跨网络作完全相同的扫描则可能显示它是 filtered(被过滤的)。</p><p>Nmap所识别的6个端口状态：</p><h2 id="open-开放的"><a href="#open-开放的" class="headerlink" title="open(开放的)"></a>open(开放的)</h2><p>应用程序正在该端口接收TCP 连接或者UDP报文。发现这一点常常是端口扫描 的主要目标。安全意识强的人们知道每个开放的端口 都是攻击的入口。攻击者或者入侵测试者想要发现开放的端口。 而管理员则试图关闭它们或者用防火墙保护它们以免妨碍了合法用户。 非安全扫描可能对开放的端口也感兴趣，因为它们显示了网络上那些服务可供使用。</p><h2 id="closed-关闭的"><a href="#closed-关闭的" class="headerlink" title="closed(关闭的)"></a>closed(关闭的)</h2><p>关闭的端口对于Nmap也是可访问的(它接受Nmap的探测报文并作出响应)， 但没有应用程序在其上监听。 它们可以显示该IP地址上(主机发现，或者ping扫描)的主机正在运行up 也对部分操作系统探测有所帮助。 因为关闭的关口是可访问的，也许过会儿值得再扫描一下，可能一些又开放了。 系统管理员可能会考虑用防火墙封锁这样的端口。 那样他们就会被显示为被过滤的状态，下面讨论。</p><h2 id="filtered-被过滤的"><a href="#filtered-被过滤的" class="headerlink" title="filtered(被过滤的)"></a>filtered(被过滤的)</h2><p>由于包过滤阻止探测报文到达端口， Nmap无法确定该端口是否开放。过滤可能来自专业的防火墙设备，路由器规则 或者主机上的软件防火墙。这样的端口让攻击者感觉很挫折，因为它们几乎不提供 任何信息。有时候它们响应ICMP错误消息如类型3代码13 (无法到达目标: 通信被管理员禁止)，但更普遍的是过滤器只是丢弃探测帧， 不做任何响应。 这迫使Nmap重试若干次以访万一探测包是由于网络阻塞丢弃的。 这使得扫描速度明显变慢。</p><h2 id="unfiltered-未被过滤的"><a href="#unfiltered-未被过滤的" class="headerlink" title="unfiltered(未被过滤的)"></a>unfiltered(未被过滤的)</h2><p>未被过滤状态意味着端口可访问，但Nmap不能确定它是开放还是关闭。 只有用于映射防火墙规则集的ACK扫描才会把端口分类到这种状态。 用其它类型的扫描如窗口扫描，SYN扫描，或者FIN扫描来扫描未被过滤的端口可以帮助确定 端口是否开放。</p><h2 id="open-filtered-开放或者被过滤的"><a href="#open-filtered-开放或者被过滤的" class="headerlink" title="open|filtered(开放或者被过滤的)"></a>open|filtered(开放或者被过滤的)</h2><p>当无法确定端口是开放还是被过滤的，Nmap就把该端口划分成 这种状态。开放的端口不响应就是一个例子。没有响应也可能意味着报文过滤器丢弃 了探测报文或者它引发的任何响应。因此Nmap无法确定该端口是开放的还是被过滤的。 UDP，IP协议， FIN，Null，和Xmas扫描可能把端口归入此类。</p><h2 id="closed-filtered-关闭或者被过滤的"><a href="#closed-filtered-关闭或者被过滤的" class="headerlink" title="closed|filtered(关闭或者被过滤的)"></a>closed|filtered(关闭或者被过滤的)</h2><p>该状态用于Nmap不能确定端口是关闭的还是被过滤的。 它只可能出现在IPID Idle扫描中。</p><h1 id="端口扫描技术"><a href="#端口扫描技术" class="headerlink" title="端口扫描技术"></a>端口扫描技术</h1><p>作为一个修车新手，我可能折腾几个小时来摸索怎样把基本工具(锤子，胶带，扳子等) 用于手头的任务。当我惨痛地失败，把我的老爷车拖到一个真正的技师那儿的时候 ，他总是在他的工具箱里翻来翻去，直到拽出一个完美的工具然后似乎不费吹灰之力搞定它。 端口扫描的艺术和这个类似。专家理解成打的扫描技术，选择最适合的一种 (或者组合)来完成给定的 任务。 另一方面，没有经验的用户和刚入门者总是用默认的SYN扫描解决每个问题。 既然Nmap是免费的，掌握端口扫描的唯一障碍就是知识。这当然是汽车世界所不能比的， 在那里，可能需要高超的技巧才能确定您需要一个压杆弹簧压缩机，接着您还得为它付数千美金。</p><p>大部分扫描类型只对特权用户可用。 这是因为他们发送接收原始报文，这在Unix系统需要root权限。 在Windows上推荐使用administrator账户，但是当WinPcap已经被加载到操作系统时， 非特权用户也可以正常使用Nmap。当Nmap在1997年发布时，需要root权限是一个严重的 局限，因为很多用户只有共享的shell账户。现在，世界变了，计算机便宜了，更多人拥有互联网连接 ，桌面UNIX系统 (包括Linux和MAC OS X)很普遍了。Windows版本的Nmap现在也有了，这使它可以运行在更多的桌面上。 由于所有这些原因，用户不再需要用有限的共享shell账户运行Nmap。 这是很幸运的，因为特权选项让Nmap强大得多也灵活得多。</p><p>虽然Nmap努力产生正确的结果，但请记住所有结果都是基于目标机器(或者它们前面的防火墙)返回的报文的。 。这些主机也许是不值得信任的，它们可能响应以迷惑或误导Nmap的报文。 更普遍的是非RFC兼容的主机以不正确的方式响应Nmap探测。FIN，Null和Xmas扫描 特别容易遇到这个问题。这些是特定扫描类型的问题，因此我们在个别扫描类型里讨论它们。</p><p>这一节讨论Nmap支持的大约十几种扫描技术。 一般一次只用一种方法， 除了UDP扫描(-sU)可能和任何一种TCP扫描类型结合使用。 友情提示一下，端口扫描类型的选项格式是-s<C>， 其中<C> 是个显眼的字符，通常是第一个字符。 一个例外是deprecated FTP bounce扫描(-b)。默认情况下，Nmap执行一个 SYN扫描，但是如果用户没有权限发送原始报文(在UNIX上需要root权限)或者如果指定的是IPv6目标，Nmap调用connect()。 本节列出的扫描中，非特权用户只能执行connect()和ftp bounce扫描。</p><h2 id="sS-TCP-SYN扫描"><a href="#sS-TCP-SYN扫描" class="headerlink" title="-sS (TCP SYN扫描)"></a>-sS (TCP SYN扫描)</h2><p>SYN扫描作为默认的也是最受欢迎的扫描选项，是有充分理由的。 它执行得很快，在一个没有入侵防火墙的快速网络上，每秒钟可以扫描数千个 端口。 SYN扫描相对来说不张扬，不易被注意到，因为它从来不完成TCP连接。 它也不像Fin&#x2F;Null&#x2F;Xmas，Maimon和Idle扫描依赖于特定平台，而可以应对任何兼容的 TCP协议栈。 它还可以明确可靠地区分open(开放的)， closed(关闭的)，和filtered(被过滤的) 状态</p><p>它常常被称为半开放扫描， 因为它不打开一个完全的TCP连接。它发送一个SYN报文， 就像您真的要打开一个连接，然后等待响应。 SYN&#x2F;ACK表示端口在监听 (开放)，而 RST (复位)表示没有监听者。如果数次重发后仍没响应， 该端口就被标记为被过滤。如果收到ICMP不可到达错误 (类型3，代码1，2，3，9，10，或者13)，该端口也被标记为被过滤。</p><h2 id="sT-TCP-connect-扫描"><a href="#sT-TCP-connect-扫描" class="headerlink" title="-sT (TCP connect()扫描)"></a>-sT (TCP connect()扫描)</h2><p>当SYN扫描不能用时，CP Connect()扫描就是默认的TCP扫描。 当用户没有权限发送原始报文或者扫描IPv6网络时，就是这种情况。 Instead of writing raw packets as most other scan types do，Nmap通过创建connect() 系统调用要求操作系统和目标机以及端口建立连接，而不像其它扫描类型直接发送原始报文。 这是和Web浏览器，P2P客户端以及大多数其它<a class="link"   href="https://zhida.zhihu.com/search?content_id=120463183&content_type=Article&match_order=1&q=%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F&zhida_source=entity" >网络应用程序 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>用以建立连接一样的 高层系统调用。它是叫做Berkeley Sockets API编程接口的一部分。Nmap用 该API获得每个连接尝试的状态信息，而不是读取响应的原始报文。</p><p>当SYN扫描可用时，它通常是更好的选择。因为Nmap对高层的 connect()调用比对原始报文控制更少， 所以前者效率较低。 该系统调用完全连接到开放的目标端口而不是像SYN扫描进行 半开放的复位。这不仅花更长时间，需要更多报文得到同样信息，目标机也更可能 记录下连接。IDS(入侵检测系统)可以捕获两者，但大部分机器没有这样的警报系统。 当Nmap连接，然后不发送数据又关闭连接， 许多普通UNIX系统上的服务会在syslog留下记录，有时候是一条加密的错误消息。 此时，有些真正可怜的服务会崩溃，虽然这不常发生。如果管理员在日志里看到来自同一系统的 一堆连接尝试，她应该知道她的系统被扫描了。</p><h2 id="sU-UDP扫描"><a href="#sU-UDP扫描" class="headerlink" title="-sU (UDP扫描)"></a>-sU (UDP扫描)</h2><p>虽然互联网上很多流行的服务运行在TCP 协议上，<a class="link"   href="https://link.zhihu.com/?target=http://www.rfc-editor.org/rfc/rfc768.txt" >UDP <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>服务也不少。 DNS，SNMP，和DHCP (注册的端口是53，161&#x2F;162，和67&#x2F;68)是最常见的三个。 因为UDP扫描一般较慢，比TCP更困难，一些安全审核人员忽略这些端口。 这是一个错误，因为可探测的UDP服务相当普遍，攻击者当然不会忽略整个协议。 所幸，Nmap可以帮助记录并报告UDP端口。</p><p>UDP扫描用-sU选项激活。它可以和TCP扫描如 SYN扫描 (-sS)结合使用来同时检查两种协议。</p><p>UDP扫描发送空的(没有数据)UDP报头到每个目标端口。 如果返回ICMP端口不可到达错误(类型3，代码3)， 该端口是closed(关闭的)。 其它ICMP不可到达错误(类型3， 代码1，2，9，10，或者13)表明该端口是filtered(被过滤的)。 偶尔地，某服务会响应一个UDP报文，证明该端口是open(开放的)。 如果几次重试后还没有响应，该端口就被认为是 open|filtered(开放|被过滤的)。 这意味着该端口可能是开放的，也可能包过滤器正在封锁通信。 可以用版本扫描(-sV)帮助区分真正的开放端口和被过滤的端口。</p><p>UDP扫描的巨大挑战是怎样使它更快速。 开放的和被过滤的端口很少响应，让Nmap超时然后再探测，以防探测帧或者 响应丢失。关闭的端口常常是更大的问题。 它们一般发回一个ICMP端口无法到达错误。但是不像关闭的TCP端口响应SYN或者Connect 扫描所发送的RST报文，许多主机在默认情况下限制ICMP端口不可到达消息。 Linux和Solaris对此特别严格。例如， Linux 2.4.20内核限制一秒钟只发送一条目标不可到达消息 (见net&#x2F;ipv4&#x2F;icmp。c)。</p><p>Nmap探测速率限制并相应地减慢来避免用那些目标机会丢弃的无用报文来阻塞 网络。不幸的是，Linux式的一秒钟一个报文的限制使65,536个端口的扫描要花 18小时以上。加速UDP扫描的方法包括并发扫描更多的主机，先只对主要端口进行快速 扫描，从防火墙后面扫描，使用–host-timeout跳过慢速的 主机。</p><h2 id="sN-sF-sX-TCP-Null，FIN，and-Xmas扫描"><a href="#sN-sF-sX-TCP-Null，FIN，and-Xmas扫描" class="headerlink" title="-sN; -sF; -sX (TCP Null，FIN，and Xmas扫描)"></a>-sN; -sF; -sX (TCP Null，FIN，and Xmas扫描)</h2><p>这三种扫描类型 (甚至用下一节描述的 –scanflags 选项的更多类型) 在<a class="link"   href="https://link.zhihu.com/?target=http://www.rfc-editor.org/rfc/rfc793.txt" >TCP RFC <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 中发掘了一个微妙的方法来区分open(开放的)和 closed(关闭的)端口。第65页说“如果 [目标]端口状态是关闭的…. 进入的不含RST的报文导致一个RST响应。” 接下来的一页 讨论不设置SYN，RST，或者ACK位的报文发送到开放端口: “理论上，这不应该发生，如果您确实收到了，丢弃该报文，返回。 ”</p><p>如果扫描系统遵循该RFC，当端口关闭时，任何不包含SYN，RST，或者ACK位的报文会导致 一个RST返回，而当端口开放时，应该没有任何响应。只要不包含SYN，RST，或者ACK， 任何其它三种(FIN，PSH，and URG)的组合都行。Nmap有三种扫描类型利用这一点：</p><h2 id="Null扫描-sN"><a href="#Null扫描-sN" class="headerlink" title="Null扫描 (-sN)"></a>Null扫描 (-sN)</h2><p>不设置任何标志位(tcp标志头是0)</p><h2 id="FIN扫描-sF"><a href="#FIN扫描-sF" class="headerlink" title="FIN扫描 (-sF)"></a>FIN扫描 (-sF)</h2><p>只设置TCP FIN标志位。</p><h2 id="Xmas扫描-sX"><a href="#Xmas扫描-sX" class="headerlink" title="Xmas扫描 (-sX)"></a>Xmas扫描 (-sX)</h2><p>设置FIN，PSH，和URG标志位，就像点亮圣诞树上所有的灯一样。</p><p>除了探测报文的标志位不同，这三种扫描在行为上完全一致。 如果收到一个RST报文，该端口被认为是 closed(关闭的)，而没有响应则意味着 端口是open|filtered(开放或者被过滤的)。 如果收到ICMP不可到达错误(类型 3，代号 1，2，3，9，10，或者13)，该端口就被标记为 被过滤的。</p><p>这些扫描的关键优势是它们能躲过一些无状态防火墙和报文过滤路由器。 另一个优势是这些扫描类型甚至比<a class="link"   href="https://zhida.zhihu.com/search?content_id=120463183&content_type=Article&match_order=11&q=SYN%E6%89%AB%E6%8F%8F&zhida_source=entity" >SYN扫描 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>还要隐秘一些。但是别依赖它 – 多数 现代的IDS产品可以发现它们。一个很大的不足是并非所有系统都严格遵循RFC 793。 许多系统不管端口开放还是关闭，都响应RST。 这导致所有端口都标记为closed(关闭的)。 这样的操作系统主要有Microsoft Windows，许多Cisco设备，BSDI，以及IBM OS&#x2F;400。 但是这种扫描对多数UNIX系统都能工作。这些扫描的另一个不足是 它们不能辨别open(开放的)端口和一些特定的 filtered(被过滤的)端口，从而返回 open|filtered(开放或者被过滤的)。</p><h2 id="sA-TCP-ACK扫描"><a href="#sA-TCP-ACK扫描" class="headerlink" title="-sA (TCP ACK扫描)"></a>-sA (TCP ACK扫描)</h2><p>这种扫描与目前为止讨论的其它扫描的不同之处在于 它不能确定open(开放的)或者 open|filtered(开放或者过滤的))端口。 它用于发现防火墙规则，确定它们是有状态的还是无状态的，哪些端口是被过滤的。</p><p>ACK扫描探测报文只设置ACK标志位(除非您使用 –scanflags)。当扫描未被过滤的系统时， open(开放的)和closed(关闭的) 端口 都会返回RST报文。Nmap把它们标记为 unfiltered(未被过滤的)，意思是 ACK报文不能到达，但至于它们是open(开放的)或者 closed(关闭的) 无法确定。不响应的端口 或者发送特定的ICMP错误消息(类型3，代号1，2，3，9，10， 或者13)的端口，标记为 filtered(被过滤的)。</p><h2 id="sW-TCP窗口扫描"><a href="#sW-TCP窗口扫描" class="headerlink" title="-sW (TCP窗口扫描)"></a>-sW (TCP窗口扫描)</h2><p>除了利用特定系统的实现细节来区分开放端口和关闭端口，当收到RST时不总是打印unfiltered， 窗口扫描和ACK扫描完全一样。 它通过检查返回的RST报文的TCP窗口域做到这一点。 在某些系统上，开放端口用正数表示窗口大小(甚至对于RST报文) 而关闭端口的窗口大小为0。因此，当收到RST时，窗口扫描不总是把端口标记为 unfiltered， 而是根据TCP窗口值是正数还是0，分别把端口标记为open或者 closed</p><p>该扫描依赖于互联网上少数系统的实现细节， 因此您不能永远相信它。不支持它的系统会通常返回所有端口closed。 当然，一台机器没有开放端口也是有可能的。 如果大部分被扫描的端口是 closed，而一些常见的端口 (如 22， 25，53) 是 filtered，该系统就非常可疑了。 偶尔地，系统甚至会显示恰恰相反的行为。 如果您的扫描显示1000个开放的端口和3个关闭的或者被过滤的端口， 那么那3个很可能也是开放的端口。</p><h2 id="sM-TCP-Maimon扫描"><a href="#sM-TCP-Maimon扫描" class="headerlink" title="-sM (TCP Maimon扫描)"></a>-sM (TCP Maimon扫描)</h2><p>Maimon扫描是用它的发现者Uriel Maimon命名的。他在 Phrack Magazine issue #49 (November 1996)中描述了这一技术。 Nmap在两期后加入了这一技术。 这项技术和Null，FIN，以及Xmas扫描完全一样，除了探测报文是FIN&#x2F;ACK。 根据RFC 793 (TCP)，无论端口开放或者关闭，都应该对这样的探测响应RST报文。 然而，Uriel注意到如果端口开放，许多基于BSD的系统只是丢弃该探测报文。</p><h2 id="–scanflags-定制的TCP扫描"><a href="#–scanflags-定制的TCP扫描" class="headerlink" title="–scanflags (定制的TCP扫描)"></a>–scanflags (定制的TCP扫描)</h2><p>真正的Nmap高级用户不需要被这些现成的扫描类型束缚。 –scanflags选项允许您通过指定任意TCP标志位来设计您自己的扫描。 让您的创造力流动，躲开那些仅靠本手册添加规则的<a class="link"   href="https://zhida.zhihu.com/search?content_id=120463183&content_type=Article&match_order=2&q=%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F&zhida_source=entity" >入侵检测系统 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>！</p><p>–scanflags选项可以是一个数字标记值如9 (PSH和FIN)， 但使用字符名更容易些。 只要是URG， ACK，PSH， RST，SYN，and FIN的任何组合就行。例如，–scanflags URGACKPSHRSTSYNFIN设置了所有标志位，但是这对扫描没有太大用处。 标志位的顺序不重要。</p><p>除了设置需要的标志位，您也可以设置 TCP扫描类型(如-sA或者-sF)。 那个基本类型告诉Nmap怎样解释响应。例如， SYN扫描认为没有响应意味着 filtered端口，而FIN扫描则认为是 open|filtered。 除了使用您指定的TCP标记位，Nmap会和基本扫描类型一样工作。 如果您不指定基本类型，就使用SYN扫描。</p><h2 id="sI-Idlescan"><a href="#sI-Idlescan" class="headerlink" title="-sI &lt;zombie host[:probeport]&gt; (Idlescan)"></a>-sI &lt;zombie host[:probeport]&gt; (Idlescan)</h2><p>这种高级的扫描方法允许对目标进行真正的TCP端口盲扫描 (意味着没有报文从您的真实IP地址发送到目标)。相反，side-channel攻击 利用zombie主机上已知的IP分段ID序列生成算法来窥探目标上开放端口的信息。 IDS系统将显示扫描来自您指定的zombie机(必须运行并且符合一定的标准)。 这种奇妙的扫描类型太复杂了，不能在此完全描述，所以我写一篇非正式的论文， 发布在<a class="link"   href="https://link.zhihu.com/?target=http://nmap.org/book/idlescan.html" >http://nmap.org/book/idlescan.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p><p>除了极端隐蔽(由于它不从真实IP地址发送任何报文)， 该扫描类型可以建立机器间的基于IP的信任关系。 端口列表从zombie 主机的角度。显示开放的端口。 因此您可以尝试用您认为(通过路由器&#x2F;包过滤规则)可能被信任的 <a class="link"   href="https://zhida.zhihu.com/search?content_id=120463183&content_type=Article&match_order=5&q=zombie&zhida_source=entity" >zombie <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>s扫描目标。</p><p>如果您由于IPID改变希望探测zombie上的特定端口， 您可以在zombie 主机后加上一个冒号和端口号。 否则Nmap会使用默认端口(80)。</p><h2 id="sO-IP协议扫描"><a href="#sO-IP协议扫描" class="headerlink" title="-sO (IP协议扫描)"></a>-sO (IP协议扫描)</h2><p>IP 协议扫描可以让您确定目标机支持哪些IP协议 (TCP，ICMP，IGMP，等等)。从技术上说，这不是端口扫描 ，既然它遍历的是IP协议号而不是TCP或者UDP端口号。 但是它仍使用 -p选项选择要扫描的协议号， 用正常的端口表格式报告结果，甚至用和真正的端口扫描一样 的扫描引擎。因此它和端口扫描非常接近，也被放在这里讨论。</p><p>除了本身很有用，协议扫描还显示了<a class="link"   href="https://zhida.zhihu.com/search?content_id=120463183&content_type=Article&match_order=1&q=%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6&zhida_source=entity" >开源软件 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>的力量。 尽管基本想法非常简单，我过去从没想过增加这一功能也没收到任何对它的请求。 在2000年夏天，Gerhard Rieger孕育了这个想法，写了一个很棒的补丁程序，发送到nmap-hackers邮件列表。 我把那个补丁加入了Nmap，第二天发布了新版本。 几乎没有商业软件会有用户有足够的热情设计并贡献他们的改进。</p><p>协议扫描以和UDP扫描类似的方式工作。它不是在UDP报文的端口域上循环， 而是在IP协议域的8位上循环，发送IP报文头。 报文头通常是空的，不包含数据，甚至不包含所申明的协议的正确报文头 TCP，UDP，和ICMP是三个例外。它们三个会使用正常的协议头，因为否则某些系 统拒绝发送，而且Nmap有函数创建它们。协议扫描不是注意ICMP端口不可到达消息， 而是ICMP 协议不可到达消息。如果Nmap从目标主机收到 任何协议的任何响应，Nmap就把那个协议标记为open。 ICMP协议不可到达 错误(类型 3，代号 2) 导致协议被标记为 closed。其它ICMP不可到达协议(类型 3，代号 1，3，9，10，或者13) 导致协议被标记为 filtered (虽然同时他们证明ICMP是 open )。如果重试之后仍没有收到响应， 该协议就被标记为open|filtered</p><h2 id="b-FTP弹跳扫描"><a href="#b-FTP弹跳扫描" class="headerlink" title="-b  (FTP弹跳扫描)"></a>-b <ftp relay host> (FTP弹跳扫描)</h2><p>FTP协议的一个有趣特征(<a class="link"   href="https://link.zhihu.com/?target=http://www.rfc-editor.org/rfc/rfc959.txt" >RFC 959 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>) 是支持所谓代理ftp连接。它允许用户连接到一台FTP服务器，然后要求文件送到一台第三方服务器。 这个特性在很多层次上被滥用，所以许多服务器已经停止支持它了。其中一种就是导致FTP服务器对其它主机端口扫描。 只要请求FTP服务器轮流发送一个文件到目标主机上的所感兴趣的端口。 错误消息会描述端口是开放还是关闭的。 这是绕过防火墙的好方法，因为FTP服务器常常被置于可以访问比Web主机更多其它内部主机的位置。 Nmap用-b选项支持ftp弹跳扫描。参数格式是 <username>:<password>@<server>:<port>。 <Server> 是某个脆弱的FTP服务器的名字或者IP地址。 您也许可以省略<username>:<password>， 如果服务器上开放了匿名用户(user:anonymous password:-wwwuser@)。 端口号(以及前面的冒号) 也可以省略，如果<server>使用默认的FTP端口(21)。</p><p>当Nmap1997年发布时，这个弱点被广泛利用，但现在大部分已经被fix了。 脆弱的服务器仍然存在，所以如果其它都失败了，这也值得一试。 如果您的目标是绕过防火墙，扫描目标网络上的开放的21端口(或者 甚至任何ftp服务，如果您用版本探测扫描所有端口)， 然后对每个尝试弹跳扫描。Nmap会告诉您该主机脆弱与否。 如果您只是试着玩Nmap，您不必(事实上，不应该)限制您自己。 在您随机地在互联网上寻找脆弱的FTP服务器时，考虑一下系统管理员不太喜欢您这样滥用他们的服务器。</p><h1 id="端口说明和扫描顺序"><a href="#端口说明和扫描顺序" class="headerlink" title="端口说明和扫描顺序"></a>端口说明和扫描顺序</h1><p>除了所有前面讨论的扫描方法， Nmap提供选项说明那些端口被扫描以及扫描是随机还是顺序进行。 默认情况下，Nmap用指定的协议对端口1到1024以及nmap-services 文件中列出的更高的端口在扫描。</p><h2 id="p-只扫描指定的端口"><a href="#p-只扫描指定的端口" class="headerlink" title="-p  (只扫描指定的端口)"></a>-p <port ranges> (只扫描指定的端口)</h2><p>该选项指明您想扫描的端口，覆盖默认值。 单个端口和用连字符表示的端口范围(如 1-1023)都可以。 范围的开始以及&#x2F;或者结束值可以被省略， 分别导致Nmap使用1和65535。所以您可以指定 -p-从端口1扫描到65535。 如果您特别指定，也可以扫描端口0。 对于IP协议扫描(-sO)，该选项指定您希望扫描的协议号 (0-255)。</p><p>当既扫描TCP端口又扫描UDP端口时，您可以通过在端口号前加上T: 或者U:指定协议。 协议限定符一直有效您直到指定另一个。 例如，参数 -p U:53，111，137，T:21-25，80，139，8080 将扫描UDP 端口53，111，和137，同时扫描列出的TCP端口。注意，要既扫描 UDP又扫描TCP，您必须指定 -sU ，以及至少一个TCP扫描类型(如 -sS，-sF，或者 -sT)。如果没有给定协议限定符， 端口号会被加到所有协议列表。</p><h2 id="F-快速-有限的端口-扫描"><a href="#F-快速-有限的端口-扫描" class="headerlink" title="-F (快速 (有限的端口) 扫描)"></a>-F (快速 (有限的端口) 扫描)</h2><p>在nmap的nmap-services 文件中(对于-sO，是协议文件)指定您想要扫描的端口。 这比扫描所有65535个端口快得多。 因为该列表包含如此多的TCP端口(1200多)，这和默认的TCP扫描 scan (大约1600个端口)速度差别不是很大。如果您用–datadir选项指定您自己的 小小的nmap-services文件 ，差别会很惊人。</p><h2 id="r-不要按随机顺序扫描端口"><a href="#r-不要按随机顺序扫描端口" class="headerlink" title="-r (不要按随机顺序扫描端口)"></a>-r (不要按随机顺序扫描端口)</h2><p>默认情况下，Nmap按随机顺序扫描端口 (除了出于效率的考虑，常用的端口前移)。这种随机化通常都是受欢迎的， 但您也可以指定-r来顺序端口扫描。</p><h1 id="服务和版本探测"><a href="#服务和版本探测" class="headerlink" title="服务和版本探测"></a>服务和版本探测</h1><p>把Nmap指向一个远程机器，它可能告诉您 端口25&#x2F;tcp，80&#x2F;tcp，和53&#x2F;udp是开放的。使用包含大约2,200个著名的服务的 nmap-services数据库， Nmap可以报告那些端口可能分别对应于一个邮件服务器 (SMTP)，web服务器(HTTP)，和域名服务器(DNS)。 这种查询通常是正确的 – 事实上，绝大多数在TCP端口25监听的<a class="link"   href="https://zhida.zhihu.com/search?content_id=120463183&content_type=Article&match_order=1&q=%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B&zhida_source=entity" >守护进程 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>是邮件 服务器。然而，您不应该把赌注押在这上面! 人们完全可以在一些奇怪的端口上运行服务。</p><p>即使Nmap是对的，假设运行服务的确实是 SMTP，HTTP和DNS，那也不是特别多的信息。 当为您的公司或者客户作安全评估(或者甚至简单的网络明细清单)时， 您确实想知道正在运行什么邮件和域名服务器以及它们的版本。 有一个精确的版本号对了解服务器有什么漏洞有巨大帮助。 版本探测可以帮您获得该信息。</p><p>在用某种其它类型的扫描方法发现TCP 和&#x2F;或者UDP端口后， 版本探测会询问这些端口，确定到底什么服务正在运行。 nmap-service-probes 数据库包含查询不同服务的探测报文 和解析识别响应的匹配表达式。 Nmap试图确定服务协议 (如 ftp，ssh，telnet，http)，应用程序名(如ISC Bind，Apache httpd，Solaris telnetd)，版本号， 主机名，设备类型(如 打印机，路由器)，操作系统家族 (如Windows，Linux)以及其它的细节，如 如是否可以连接X server，SSH协议版本 ，或者KaZaA用户名)。当然，并非所有服务都提供所有这些信息。 如果Nmap被编译成支持OpenSSL， 它将连接到SSL服务器，推测什么服务在加密层后面监听。 当发现RPC服务时， Nmap RPC grinder (-sR)会自动被用于确定RPC程序和它的版本号。 如果在扫描某个UDP端口后仍然无法确定该端口是开放的还是被过滤的，那么该端口状态就 被标记为open|filtered。 版本探测将试图从这些端口引发一个响应(就像它对开放端口做的一样)， 如果成功，就把状态改为开放。 open|filtered TCP端口用同样的方法对待。 注意Nmap -A选项在其它情况下打开版本探测。 有一篇关于版本探测的原理，使用和定制的文章在 <a class="link"   href="https://link.zhihu.com/?target=http://www.insecure.org/nmap/vscan/" >http://www.insecure.org/nmap/vscan/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p><p>当Nmap从某个服务收到响应，但不能在数据库中找到匹配时， 它就打印一个特殊的fingerprint和一个URL给您提交，如果您确实知道什么服务运行在端口。 请花两分钟提交您的发现，让每个人受益。由于这些提交， Nmap有350种以上协议如smtp，ftp，http等的大约3，000条模式匹配。</p><p>用下列的选项打开和控制版本探测。</p><h2 id="sV-版本探测"><a href="#sV-版本探测" class="headerlink" title="-sV (版本探测)"></a>-sV (版本探测)</h2><p>打开版本探测。 您也可以用-A同时打开操作系统探测和版本探测。</p><h2 id="–allports-不为版本探测排除任何端口"><a href="#–allports-不为版本探测排除任何端口" class="headerlink" title="–allports (不为版本探测排除任何端口)"></a>–allports (不为版本探测排除任何端口)</h2><p>默认情况下，Nmap版本探测会跳过9100 TCP端口，因为一些打印机简单地打印送到该端口的 任何数据，这回导致数十页HTTP get请求，二进制 SSL会话请求等等被打印出来。这一行为可以通过修改或删除nmap-service-probes 中的Exclude指示符改变， 您也可以不理会任何Exclude指示符，指定–allports扫描所有端口</p><h2 id="–version-intensity-设置-版本扫描强度"><a href="#–version-intensity-设置-版本扫描强度" class="headerlink" title="–version-intensity  (设置 版本扫描强度)"></a>–version-intensity <intensity> (设置 版本扫描强度)</h2><p>当进行版本扫描(-sV)时，nmap发送一系列探测报文 ，每个报文都被赋予一个1到9之间的值。 被赋予较低值的探测报文对大范围的常见服务有效，而被赋予较高值的报文 一般没什么用。强度水平说明了应该使用哪些探测报文。数值越高， 服务越有可能被正确识别。 然而，高强度扫描花更多时间。强度值必须在0和9之间。 默认是7。当探测报文通过nmap-service-probes ports指示符 注册到目标端口时，无论什么强度水平，探测报文都会被尝试。这保证了DNS 探测将永远在任何开放的53端口尝试， SSL探测将在443端口尝试，等等。</p><h2 id="–version-light-打开轻量级模式"><a href="#–version-light-打开轻量级模式" class="headerlink" title="–version-light (打开轻量级模式)"></a>–version-light (打开轻量级模式)</h2><p>这是 –version-intensity 2的方便的别名。轻量级模式使 版本扫描快许多，但它识别服务的可能性也略微小一点。</p><h2 id="–version-all-尝试每个探测"><a href="#–version-all-尝试每个探测" class="headerlink" title="–version-all (尝试每个探测)"></a>–version-all (尝试每个探测)</h2><p>–version-intensity 9的别名， 保证对每个端口尝试每个探测报文。</p><h2 id="–version-trace-跟踪版本扫描活动"><a href="#–version-trace-跟踪版本扫描活动" class="headerlink" title="–version-trace (跟踪版本扫描活动)"></a>–version-trace (跟踪版本扫描活动)</h2><p>这导致Nmap打印出详细的关于正在进行的扫描的调试信息。 它是您用–packet-trace所得到的信息的子集。</p><h2 id="sR-RPC扫描"><a href="#sR-RPC扫描" class="headerlink" title="-sR (RPC扫描)"></a>-sR (RPC扫描)</h2><p>这种方法和许多端口扫描方法联合使用。 它对所有被发现开放的TCP&#x2F;UDP端口执行SunRPC程序NULL命令，来试图 确定它们是否RPC端口，如果是， 是什么程序和版本号。因此您可以有效地获得和rpcinfo -p一样的信息， 即使目标的端口映射在防火墙后面(或者被TCP包装器保护)。Decoys目前不能和RPC scan一起工作。 这作为版本扫描(-sV)的一部分自动打开。 由于版本探测包括它并且全面得多，-sR很少被需要。</p><h1 id="操作系统探测"><a href="#操作系统探测" class="headerlink" title="操作系统探测"></a>操作系统探测</h1><p>Nmap最著名的功能之一是用TCP&#x2F;IP协议栈fingerprinting进行远程操作系统探测。 Nmap发送一系列TCP和UDP报文到远程主机，检查响应中的每一个比特。 在进行一打测试如TCP ISN采样，TCP选项支持和排序，IPID采样，和初始窗口大小检查之后， Nmap把结果和数据库nmap-os-fingerprints中超过 1500个已知的操作系统的<a class="link"   href="https://zhida.zhihu.com/search?content_id=120463183&content_type=Article&match_order=2&q=fingerprints&zhida_source=entity" >fingerprints <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>进行比较，如果有匹配，就打印出操作系统的详细信息。 每个fingerprint包括一个自由格式的关于OS的描述文本， 和一个分类信息，它提供供应商名称(如Sun)，下面的操作系统(如Solaris)，OS版本(如10)， 和设备类型(通用设备，路由器，switch，<a class="link"   href="https://zhida.zhihu.com/search?content_id=120463183&content_type=Article&match_order=1&q=%E6%B8%B8%E6%88%8F%E6%8E%A7%E5%88%B6%E5%8F%B0&zhida_source=entity" >游戏控制台 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>， 等)。</p><p>如果Nmap不能猜出操作系统，并且有些好的已知条件(如 至少发现了一个开放端口和一个关闭端口)，Nmap会提供一个 URL，如果您确知运行的操作系统，您可以把fingerprint提交到那个URL。 这样您就扩大了Nmap的操作系统知识库，从而让每个Nmap用户都受益。</p><p>操作系统检测可以进行其它一些测试，这些测试可以利用处理 过程中收集到的信息。例如运行时间检测，使用TCP时间戳选项(RFC 1323) 来估计主机上次重启的时间，这仅适用于提供这类信息的主机。另一种 是TCP序列号预测分类，用于测试针对远程主机建立一个伪造的TCP连接 的可能难度。这对于利用基于源IP地址的可信关系(rlogin，防火墙过滤等) 或者隐含源地址的攻击非常重要。这一类哄骗攻击现在很少见，但一些 主机仍然存在这方面的漏洞。实际的难度值基于统计采样，因此可能会有 一些波动。通常采用英国的分类较好，如“worthy challenge”或者 “trivial joke”。在详细模式(-v)下只以 普通的方式输出，如果同时使用-O，还报告IPID序列产生号。 很多主机的序列号是“增加”类别，即在每个发送包的IP头中 增加ID域值， 这对一些先进的信息收集和哄骗攻击来说是个漏洞。</p><p><a class="link"   href="https://link.zhihu.com/?target=http://nmap.org/book/osdetect.html" >http://nmap.org/book/osdetect.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 文档使用多种语言描述了版本检测的方式、使用和定制。</p><p>采用下列选项启用和控制操作系统检测:</p><h2 id="O-启用操作系统检测"><a href="#O-启用操作系统检测" class="headerlink" title="-O (启用操作系统检测)"></a>-O (启用操作系统检测)</h2><p>也可以使用-A来同时启用操作系统检测和版本检测。</p><h2 id="–osscan-limit-针对指定的目标进行操作系统检测"><a href="#–osscan-limit-针对指定的目标进行操作系统检测" class="headerlink" title="–osscan-limit (针对指定的目标进行操作系统检测)"></a>–osscan-limit (针对指定的目标进行操作系统检测)</h2><p>如果发现一个打开和关闭的TCP端口时，操作系统检测会更有效。 采用这个选项，Nmap只对满足这个条件的主机进行操作系统检测，这样可以 节约时间，特别在使用-P0扫描多个主机时。这个选项仅在使用 -O或-A 进行操作系统检测时起作用。</p><h2 id="–osscan-guess-–fuzzy-推测操作系统检测结果"><a href="#–osscan-guess-–fuzzy-推测操作系统检测结果" class="headerlink" title="–osscan-guess; –fuzzy (推测操作系统检测结果)"></a>–osscan-guess; –fuzzy (推测操作系统检测结果)</h2><p>当Nmap无法确定所检测的操作系统时，会尽可能地提供最相近的匹配，Nmap默认 进行这种匹配，使用上述任一个选项使得Nmap的推测更加有效。</p><h1 id="时间和性能"><a href="#时间和性能" class="headerlink" title="时间和性能"></a>时间和性能</h1><p>Nmap开发的最高优先级是性能。在本地网络对一个主机的默认扫描(nmap <hostname>)需要1&#x2F;5秒。而仅仅眨眼的 时间，就需要扫描上万甚至几十万的主机。此外，一些特定的扫描选项会明显增 加扫描时间，如UDP扫描和版本检测。同样，防火墙配置以及特殊的响应速度限制也会 增加时间。Nmap使用了并行算法和许多先进的算法来加速扫描，用户对Nmap如何 工作有最终的控制权。高级用户可以仔细地调整Nmap命令，在满足时间要求的同时获得他们所关心的信息。</p><p>改善扫描时间的技术有：忽略非关键的检测、升级最新版本的Nmap(性能增强不断改善)。 优化时间参数也会带来实质性的变化，这些参数如下。</p><h2 id="–min-hostgroup-–max-hostgroup-调整并行扫描组的大小"><a href="#–min-hostgroup-–max-hostgroup-调整并行扫描组的大小" class="headerlink" title="–min-hostgroup ; –max-hostgroup  (调整并行扫描组的大小)"></a>–min-hostgroup <milliseconds>; –max-hostgroup <milliseconds> (调整并行扫描组的大小)</h2><p>Nmap具有并行扫描多主机端口或版本的能力，Nmap将多个目标IP地址 空间分成组，然后在同一时间对一个组进行扫描。通常，大的组更有效。缺 点是只有当整个组扫描结束后才会提供主机的扫描结果。如果组的大小定义 为50，则只有当前50个主机扫描结束后才能得到报告(详细模式中的补充信息 除外)。</p><p>默认方式下，Nmap采取折衷的方法。开始扫描时的组较小， 最小为5，这样便于尽快产生结果；随后增长组的大小，最大为1024。确切的 大小依赖于所给定的选项。为保证效率，针对UDP或少量端口的TCP扫描，Nmap 使用大的组。</p><p>–max-hostgroup选项用于说明使用最大的组，Nmap不 会超出这个大小。–min-hostgroup选项说明最小的组，Nmap 会保持组大于这个值。如果在指定的接口上没有足够的目标主机来满足所 指定的最小值，Nmap可能会采用比所指定的值小的组。这两个参数虽然很少使用， 但都用于保持组的大小在一个指定的范围之内。</p><p>这些选项的主要用途是说明一个最小组的大小，使得整个扫描更加快速。通常 选择256来扫描C类网段。对于端口数较多的扫描，超出该值没有意义。对于 端口数较少的扫描，2048或更大的组大小是有帮助的。</p><h2 id="–min-parallelism-–max-parallelism-调整探测报文的并行度"><a href="#–min-parallelism-–max-parallelism-调整探测报文的并行度" class="headerlink" title="–min-parallelism ; –max-parallelism  (调整探测报文的并行度)"></a>–min-parallelism <milliseconds>; –max-parallelism <milliseconds> (调整探测报文的并行度)</h2><p>这些选项控制用于主机组的探测报文数量，可用于端口扫描和主机发现。默认状态下， Nmap基于网络性能计算一个理想的并行度，这个值经常改变。如果报文被丢弃， Nmap降低速度，探测报文数量减少。随着网络性能的改善，理想的探测报文数量会缓慢增加。 这些选项确定这个变量的大小范围。默认状态下，当网络不可靠时，理想的并行度值 可能为1，在好的条件下，可能会增长至几百。</p><p>最常见的应用是–min-parallelism值大于1，以加快 性能不佳的主机或网络的扫描。这个选项具有风险，如果过高则影响准确度，同时 也会降低Nmap基于网络条件动态控制并行度的能力。这个值设为10较为合适， 这个值的调整往往作为最后的手段。</p><p>–max-parallelism选项通常设为1，以防止Nmap在同一时间 向主机发送多个<a class="link"   href="https://zhida.zhihu.com/search?content_id=120463183&content_type=Article&match_order=20&q=%E6%8E%A2%E6%B5%8B%E6%8A%A5%E6%96%87&zhida_source=entity" >探测报文 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，和选择–scan-delay同时使用非常有用，虽然 这个选项本身的用途已经很好。</p><h2 id="–min-rtt-timeout-，-–max-rtt-timeout-，-–initial-rtt-timeout-调整探测报文超时"><a href="#–min-rtt-timeout-，-–max-rtt-timeout-，-–initial-rtt-timeout-调整探测报文超时" class="headerlink" title="–min-rtt-timeout ， –max-rtt-timeout ， –initial-rtt-timeout  (调整探测报文超时)"></a>–min-rtt-timeout <milliseconds>， –max-rtt-timeout <milliseconds>， –initial-rtt-timeout <milliseconds> (调整探测报文超时)</h2><p>Nmap使用一个运行超时值来确定等待探测报文响应的时间，随后会放弃或重新 发送探测报文。Nmap基于上一个探测报文的响应时间来计算超时值，如果网络延迟比较显著 和不定，这个超时值会增加几秒。初始值的比较保守(高)，而当Nmap扫描无响应 的主机时，这个保守值会保持一段时间。</p><p>这些选项以毫秒为单位，采用小的–max-rtt-timeout值，使 –initial-rtt-timeout值大于默认值可以明显减少扫描时间，特别 是对不能ping通的扫描(-P0)以及具有严格过滤的网络。如果使用太 小的值，使得很多探测报文超时从而重新发送，而此时可能响应消息正在发送，这使得整个扫描的时 间会增加。</p><p>如果所有的主机都在本地网络，对于–max-rtt-timeout值来 说，100毫秒比较合适。如果存在路由，首先使用ICMP ping工具ping主机，或使用其 它报文工具如hpings，可以更好地穿透防火墙。查看大约10个包的最大往返时间，然后将 –initial-rtt-timeout设成这个时间的2倍，–max-rtt-timeout 可设成这个时间值的3倍或4倍。通常，不管ping的时间是多少，最大的rtt值不得小于100ms， 不能超过1000ms。</p><p>–min-rtt-timeout这个选项很少使用，当网络不可靠时， Nmap的默认值也显得过于强烈，这时这个选项可起作用。当网络看起来不可靠时，Nmap仅将 超时时间降至最小值，这个情况是不正常的，需要向nmap-dev邮件列表报告bug。</p><h2 id="–host-timeout-放弃低速目标主机"><a href="#–host-timeout-放弃低速目标主机" class="headerlink" title="–host-timeout  (放弃低速目标主机)"></a>–host-timeout <milliseconds> (放弃低速目标主机)</h2><p>由于性能较差或不可靠的网络硬件或软件、带宽限制、严格的防火墙等原因， 一些主机需要很长的时间扫描。这些极少数的主机扫描往往占 据了大部分的扫描时间。因此，最好的办法是减少时间消耗并且忽略这些主机，使用 –host-timeout选项来说明等待的时间(毫秒)。通常使用1800000 来保证Nmap不会在单个主机上使用超过半小时的时间。需要注意的是，Nmap在这半小时中可以 同时扫描其它主机，因此并不是完全放弃扫描。超时的主机被忽略，因此也没有针对该主机的 端口表、操作系统检测或版本检测结果的输出。</p><h2 id="–scan-delay-–max-scan-delay-调整探测报文的时间间隔"><a href="#–scan-delay-–max-scan-delay-调整探测报文的时间间隔" class="headerlink" title="–scan-delay ; –max-scan-delay  (调整探测报文的时间间隔)"></a>–scan-delay <milliseconds>; –max-scan-delay <milliseconds> (调整探测报文的时间间隔)</h2><p>这个选项用于Nmap控制针对一个主机发送探测报文的等待时间(毫秒)，在带宽 控制的情况下这个选项非常有效。Solaris主机在响应UDP扫描探测报文报文时，每秒 只发送一个ICMP消息，因此Nmap发送的很多数探测报文是浪费的。–scan-delay 设为1000，使Nmap低速运行。Nmap尝试检测带宽控制并相应地调整扫描的延迟，但 并不影响明确说明何种速度工作最佳。</p><p>–scan-delay的另一个用途是躲闭基于阈值的入侵检测和预防 系统(IDS&#x2F;IPS)。</p><h2 id="T-设置时间模板"><a href="#T-设置时间模板" class="headerlink" title="-T &lt;Paranoid|Sneaky|Polite|Normal|Aggressive|Insane&gt; (设置时间模板)"></a>-T &lt;Paranoid|Sneaky|Polite|Normal|Aggressive|Insane&gt; (设置时间模板)</h2><p>上述优化时间控制选项的功能很强大也很有效，但有些用户会被迷惑。此外， 往往选择合适参数的时间超过了所需优化的扫描时间。因此，Nmap提供了一些简单的 方法，使用6个时间模板，使用时采用-T选项及数字(0 - 5) 或名称。模板名称有paranoid (0)、<a class="link"   href="https://zhida.zhihu.com/search?content_id=120463183&content_type=Article&match_order=1&q=sneaky&zhida_source=entity" >sneaky <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> (1)、polite (2)、normal(3)、 aggressive (4)和insane (5)。前两种模式用于IDS躲避，Polite模式降低了扫描 速度以使用更少的带宽和目标主机资源。默认模式为Normal，因此-T3 实际上是未做任何优化。Aggressive模式假设用户具有合适及可靠的网络从而加速 扫描。Insane模式假设用户具有特别快的网络或者愿意为获得速度而牺牲准确性。</p><p>用户可以根据自己的需要选择不同的模板，由Nmap负责选择实际的时间值。 模板也会针对其它的优化控制选项进行速度微调。例如，-T4 针对TCP端口禁止动态扫描延迟超过10ms，-T5对应的值为5ms。 模板可以和优化调整控制选项组合使用，但模板必须首先指定，否则模板的标准值 会覆盖用户指定的值。建议在扫描可靠的网络时使用 -T4，即使 在自己要增加优化控制选项时也使用(在命令行的开始)，从而从这些额外的较小的优化 中获益。</p><p>如果用于有足够的带宽或以太网连接，仍然建议使用-T4选项。 有些用户喜欢-T5选项，但这个过于强烈。有时用户考虑到避免使主机 崩溃或者希望更礼貌一些会采用-T2选项。他们并没意识到-T Polite选项是如何的慢，这种模式的扫描比默认方式实际上要多花10倍的时间。默认时间 选项(-T3)很少有主机崩溃和带宽问题，比较适合于谨慎的用户。不进行 版本检测比进行时间调整能更有效地解决这些问题。</p><p>虽然-T0和-T1选项可能有助于避免IDS告警，但 在进行上千个主机或端口扫描时，会显著增加时间。对于这种长时间的扫描，宁可设定确切的时间 值，而不要去依赖封装的-T0和-T1选项。</p><p>T0选项的主要影响是对于连续扫描，在一个时间只能扫描一个端口， 每个探测报文的发送间隔为5分钟。T1和T2选项比较类似， 探测报文间隔分别为15秒和0.4秒。T3是Nmap的默认选项，包含了并行扫描。 T4选项与 –max-rtt-timeout 1250 –initial-rtt-timeout 500 等价，最大TCP扫描延迟为10ms。T5等价于 –max-rtt-timeout 300 –min-rtt-timeout 50 –initial-rtt-timeout 250 –host-timeout 900000，最大TCP扫描延迟为5ms。</p><h1 id="防火墙-IDS躲避和哄骗"><a href="#防火墙-IDS躲避和哄骗" class="headerlink" title="防火墙&#x2F;IDS躲避和哄骗"></a>防火墙&#x2F;IDS躲避和哄骗</h1><p>很多Internet先驱们设想了一个全球开放的网络，使用全局的IP 地址空间，使得任何两个节点之间都有虚拟连接。这使得主机间可以作为真 正的对等体，相互间提供服务和获取信息。人们可以在工作时访问家里所 有的系统、调节空调温度、为提前到来的客人开门。随后，这些全球连接的设想 受到了地址空间短缺和安全考虑的限制。在90年代早期，各种机构开始部 署防火墙来实现减少连接的目的，大型网络通过代理、NAT和包过滤器与未 过滤的Internet隔离。不受限的信息流被严格控制的可信通信通道信息流所替代。</p><p>类似防火墙的网络隔离使得对网络的搜索更加困难，随意的搜 索变得不再简单。然而，Nmap提供了很多特性用于理解这些复杂的网 络，并且检验这些过滤器是否正常工作。此外，Nmap提供了绕过某些较弱的 防范机制的手段。检验网络安全状态最有效的方法之一是尝试哄骗网络，将 自己想象成一个攻击者，使用本节提供的技术来攻击自己的网络。如使用FTP bounce扫描、Idle扫描、分片攻击或尝试穿透自己的代理。</p><p>除限止网络的行为外，使用入侵检测系统(IDS)的公司也不断增加。由于Nmap 常用于攻击前期的扫描，因此所有主流的IDS都包含了检测Nmap扫描的规则。 现在，这些产品变形为<a class="link"   href="https://zhida.zhihu.com/search?content_id=120463183&content_type=Article&match_order=1&q=%E5%85%A5%E4%BE%B5%E9%A2%84%E9%98%B2%E7%B3%BB%E7%BB%9F&zhida_source=entity" >入侵预防系统 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>(IPS)，可以主 动地阻止可疑的恶意行为。不幸的是，<a class="link"   href="https://zhida.zhihu.com/search?content_id=120463183&content_type=Article&match_order=1&q=%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%91%98&zhida_source=entity" >网络管理员 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>和IDS厂商通过分析报文 来检测恶意行为是一个艰苦的工作，有耐心和技术的攻击者，在特定Nmap选项 的帮助下，常常可以不被IDS检测到。同时，管理员必须应付大量的误报结果， 正常的行为被误判而被改变或阻止。</p><p>有时，人们建议Nmap不应该提供躲闭防火墙规则或哄骗IDS的功能， 这些功能可能会被攻击者滥用，然而管理员却可以利用这些功能来增强安全性。 实际上，攻击的方法仍可被攻击者利用，他们可以发现其它工具或Nmap的补丁程 序。同时，管理员发现攻击者的工作更加困难，相比较采取措施来预防执 行FTP Bounce攻击的工具而言，部署先进的、打过补丁的FTP服务器更 加有效。</p><p>Nmap不提供检测和破坏防火墙及IDS系统的魔弹(或Nmap选项)，它使用 的是技术和经验，这超出了本<a class="link"   href="https://zhida.zhihu.com/search?content_id=120463183&content_type=Article&match_order=1&q=%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C&zhida_source=entity" >参考手册 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>的范围，下面描述了相关的选项和 完成的工作。</p><h2 id="f-报文分段-–mtu-使用指定的MTU"><a href="#f-报文分段-–mtu-使用指定的MTU" class="headerlink" title="-f (报文分段); –mtu (使用指定的MTU)"></a>-f (报文分段); –mtu (使用指定的MTU)</h2><p>-f选项要求扫描时(包挺ping扫描)使用 小的IP包分段。其思路是将TCP头分段在几个包中，使得包过滤器、 IDS以及其它工具的检测更加困难。必须小心使用这个选项，有些系 统在处理这些小包时存在问题，例如旧的网络嗅探器Sniffit在接收 到第一个分段时会立刻出现分段错误。该选项使用一次，Nmap在IP 头后将包分成8个字节或更小。因此，一个20字节的TCP头会被分成3个 包，其中2个包分别有TCP头的8个字节，另1个包有TCP头的剩下4个字 节。当然，每个包都有一个IP头。再次使用-f可使用 16字节的分段(减少分段数量)。使用–mtu选项可 以自定义偏移的大小，使用时不需要-f，偏移量必须 是8的倍数。包过滤器和防火墙对所有的IP分段排队，如Linux核心中的 CONFIG-IP-ALWAYS-DEFRAG配置项，分段包不会直接使用。一些网络无法 承受这样所带来的性能冲击，会将这个配置禁止。其它禁止的原因有分段 包会通过不同的路由进入网络。一些源系统在内核中对发送的报文进行 分段，使用iptables连接跟踪模块的Linux就是一个例子。当使用类似Ethereal 的嗅探器时，扫描必须保证发送的报文要分段。如果主机操作系统会产 生问题，尝试使用–send-eth选项以避开IP层而直接 发送原始的以太网帧。</p><h2 id="D-使用诱饵隐蔽扫描"><a href="#D-使用诱饵隐蔽扫描" class="headerlink" title="-D &lt;decoy1 [，decoy2][，ME]，…&gt; (使用诱饵隐蔽扫描)"></a>-D &lt;decoy1 [，decoy2][，ME]，…&gt; (使用诱饵隐蔽扫描)</h2><p>为使诱饵扫描起作用，需要使远程主机认为是诱饵在扫描目标网络。 IDS可能会报个某个IP的5-10个端口扫描，但并不知道哪个IP在扫描以及 哪些不是诱饵。但这种方式可以通过路由跟踪、响应丢弃以及其它主动 机制在解决。这是一种常用的隐藏自身IP地址的有效技术。</p><p>使用逗号分隔每个诱饵主机，也可用自己的真实IP作为诱饵，这时可使用 ME选项说明。如果在第6个位置或 更后的位置使用ME选项，一些常用 端口扫描检测器(如Solar Designer’s excellent scanlogd)就不会报告 这个真实IP。如果不使用ME选项，Nmap 将真实IP放在一个随机的位置</p><p>注意，作为诱饵的主机须在工作状态，否则会导致目标主机的SYN洪水攻击。 如果在网络中只有一个主机在工作，那就很容易确定哪个主机在扫描。也可 使用IP地址代替主机名(被诱骗的网络就不可能在名字服务器日志中发现)。</p><p>诱饵可用在初始的ping扫描(ICMP、SYN、ACK等)阶段或真正的端口扫描 阶段。诱饵也可以用于远程操作系统检测(-O)。在进行版 本检测或TCP连接扫描时，诱饵无效。</p><p>使用过多的诱饵没有任何价值，反而导致扫描变慢并且结果不准确。 此外，一些ISP会过滤哄骗的报文，但很多对欺骗IP包没有任何限制。</p><h2 id="S-源地址哄骗"><a href="#S-源地址哄骗" class="headerlink" title="-S  (源地址哄骗)"></a>-S <IP_Address> (源地址哄骗)</h2><p>在某些情况下，Nmap可能无法确定你的源地址(如果这样，Nmap会给出 提示)。此时，使用-S选项并说明所需发送包的接口IP地址。</p><p>这个标志的另一个用处是哄骗性的扫描，使得目标认为是另 一个地址在进行扫描。可以想象某一个竞争对手在不断扫描某个公司！ -e选项常在这种情况下使用，也可采用-P0选项。</p><h2 id="e-使用指定的接口"><a href="#e-使用指定的接口" class="headerlink" title="-e  (使用指定的接口)"></a>-e <interface> (使用指定的接口)</h2><p>告诉Nmap使用哪个接口发送和接收报文，Nmap可以进行自动检测， 如果检测不出会给出提示。</p><h2 id="–source-port-g-源端口哄骗"><a href="#–source-port-g-源端口哄骗" class="headerlink" title="–source-port ; -g  (源端口哄骗)"></a>–source-port <portnumber>; -g <portnumber> (源端口哄骗)</h2><p>仅依赖于源端口号就信任数据流是一种常见的错误配置，这个问题非常 好理解。例如一个管理员部署了一个新的防火墙，但招来了很多用户的不满，因为 他们的应用停止工作了。可能是由于外部的UDP DNS服务器响应无法进入网络，而导致 DNS的崩溃。FTP是另一个常见的例子，在FTP传输时，远程服务器尝试和内部用 建立连接以传输数据。</p><p>对这些问题有安全解决方案，通常是应用级代理或协议分析防火墙模块。 但也存在一些不安全的方案。注意到DNS响应来自于53端口，FTP连接 来自于20端口，很多管理员会掉入一个陷阱，即允许来自于这些端口的数据进入 网络。他们认为这些端口里不会有值得注意的攻击和漏洞利用。此外，管理员 或许认为这是一个短期的措施，直至他们采取更安全的方案。但他们忽视了安全的 升级。</p><p>不仅仅是工作量过多的网络管理员掉入这种陷阱，很多产品本身也会有这类 不安全的隐患，甚至是微软的产品。Windows 2000和Windows XP中包含的IPsec过滤 器也包含了一些隐含规则，允许所有来自88端口(Kerberos)的TCP和UDP数据流。另 一个常见的例子是Zone Alarm个人防火墙到2.1.25版本仍然允许源端口53(DNS)或 67(DHCP)的UDP包进入。</p><p>Nmap提供了-g和–source-port选项(它们是 等价的)，用于利用上述弱点。只需要提供一个端口号，Nmap就可以从这些 端口发送数据。为使特定的操作系统正常工作，Nmap必须使用不同的端口号。 DNS请求会忽略–source-port选项，这是因为Nmap依靠系 统库来处理。大部分TCP扫描，包括SYN扫描，可以完全支持这些选项，UDP扫 描同样如此。</p><h2 id="–data-length-发送报文时-附加随机数据"><a href="#–data-length-发送报文时-附加随机数据" class="headerlink" title="–data-length  (发送报文时 附加随机数据)"></a>–data-length <number> (发送报文时 附加随机数据)</h2><p>正常情况下，Nmap发送最少的报文，只含一个包头。因此TCP包通常 是40字节，ICMP ECHO请求只有28字节。这个选项告诉Nmap在发送的报文上 附加指定数量的随机字节。操作系统检测(-O)包不受影响， 但大部分ping和端口扫描包受影响，这会使处理变慢，但对扫描的影响较小。</p><h2 id="–ttl-设置IP-time-to-live域"><a href="#–ttl-设置IP-time-to-live域" class="headerlink" title="–ttl  (设置IP time-to-live域)"></a>–ttl <value> (设置IP time-to-live域)</h2><p>设置IPv4报文的time-to-live域为指定的值。</p><h2 id="–randomize-hosts-对目标主机的顺序随机排列"><a href="#–randomize-hosts-对目标主机的顺序随机排列" class="headerlink" title="–randomize-hosts (对目标主机的顺序随机排列)"></a>–randomize-hosts (对目标主机的顺序随机排列)</h2><p>告诉Nmap在扫描主机前对每个组中的主机随机排列，最多可达 8096个主机。这会使得扫描针对不同的网络监控系统来说变得不是很 明显，特别是配合值较小的时间选项时更有效。如果需要对一个较大 的组进行随机排列，需要增大nmap.h文件中 PING-GROUP-SZ的值，并重新编译。另一种方法是使用列表扫描 (-sL -n -oN <filename>)，产生目标IP的列表， 使用Perl脚本进行随机化，然后使用-iL提供给Nmap。</p><h2 id="–spoof-mac-MAC地址哄骗"><a href="#–spoof-mac-MAC地址哄骗" class="headerlink" title="–spoof-mac &lt;mac address，prefix，or vendor name&gt; (MAC地址哄骗)"></a>–spoof-mac &lt;mac address，prefix，or vendor name&gt; (MAC地址哄骗)</h2><p>要求Nmap在发送原以太网帧时使用指定的MAC地址，这个选项隐含了 –send-eth选项，以保证Nmap真正发送以太网包。MAC地址有几 种格式。如果简单地使用字符串“0”，Nmap选择一个完全随机的MAC 地址。如果给定的字符品是一个16进制偶数(使用:分隔)，Nmap将使用这个MAC地址。 如果是小于12的16进制数字，Nmap会随机填充剩下的6个字节。如果参数不是0或16进 制字符串，Nmap将通过nmap-mac-prefixes查找 厂商的名称(大小写区分)，如果找到匹配，Nmap将使用厂商的OUI(3字节前缀)，然后 随机填充剩余的3个节字。正确的–spoof-mac参数有， Apple， 0，01:02:03:04:05:06， deadbeefcafe，0020F2， 和Cisco.</p><h1 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h1><p>任何安全工具只有在输出结果时才是有价值的，如果没有通过组织和 易于理解的方式来表达，复杂的测试和算法几乎没有意义。Nmap提供了一些 方式供用户和其它软件使用，实际上，没有一种方式可以使所有人满意。 因此Nmap提供了一些格式，包含了方便直接查看的交互方式和方便软件处理 的XML格式。</p><p>除了提供输出格式外，Nmap还提供了选项来控制输出的细节以及调试 信息。输出内容可发送给标准输出或命名文件，可以追加或覆盖。输出文件还可 被用于继续中断的扫描。</p><p>Nmap提供5种不同的输出格式。默认的方式是interactive output， 发送给标准输出(stdout)。normal output方式类似于 interactive，但显示较少的运行时间信息 和告警信息，这是由于这些信息是在扫描完全结束后用于分析，而不是交互式的。</p><p>XML输出是最重要的输出类型，可被转换成HTML，对于程序处理非常方便， 如用于Nmap图形用户接口或导入数据库。</p><p>另两种输出类型比较简单，grepable output格式，在一行中包含目标主机最多的信息；sCRiPt KiDDi3 0utPUt 格式，用于考虑自己的用户 |&lt;-r4d。</p><p>交互式输出是默认方式，没有相应的命令行选项，其它四种格式选项 使用相同的语法，采用一个参数，即存放结果的文件名。多种格式可同时 使用，但一种格式只能使用一次。例如，在标准输出用于查看的同时，可将结 果保存到XML文件用于程序分析，这时可以使用选项-oX myscan.xml -oN myscan.nmap。 为便于描述的简化，本章使用类似于myscan.xml的简单文件名， 建议采用更具有描述性的文件名。文件名的选择与个人喜好有关，建议增加 扫描日期以及一到两个单词来描述，并放置于一个目录中。</p><p>在将结果输出到文件的同时，Nmap仍将结果发送给标准输出。例如， 命令nmap -oX myscan.xml target将 输出XML至myscan.xml，并在stdout 上打印相同的交互式结果，而此时-oX选项没有采用。可以 使用连字符作为选项来改变，这使得Nmap禁止交互式输出，而是将结果打印到 所指定的标准输出流中。因此，命令nmap -oX - target只 输出XML至标准输出stdout。严重错误仍然是输出到标准错误流stderr中。</p><p>与其它Nmap参数不同，日志文件选项的空格(如-oX)和 文件名或连字符是必需的。如果省略了标记，例如-oG-或 -oXscan.xml，Nmap的向后兼容特点将建立 标准格式的输出文件，相应的文件名为G-和 Xscan.xml。</p><p>Nmap还提供了控制扫描细节以及输出文件的添加或覆盖的选项，这些选项 如下所述。</p><p>Nmap输出格式</p><h2 id="oN-标准输出"><a href="#oN-标准输出" class="headerlink" title="-oN  (标准输出)"></a>-oN <filespec> (标准输出)</h2><p>要求将标准输出直接写入指定 的文件。如上所述，这个格式与交互式输出 略有不同。</p><h2 id="oX-XML输出"><a href="#oX-XML输出" class="headerlink" title="-oX  (XML输出)"></a>-oX <filespec> (XML输出)</h2><p>要求XML输出直接写入指定 的文件。Nmap包含了一个文档类型定义(DTD)，使XML解析器有效地 进行XML输出。这主要是为了程序应用，同时也可以协助人工解释 Nmap的XML输出。DTD定义了合法的格式元素，列举可使用的属性和 值。最新的版本可在 <a class="link"   href="https://link.zhihu.com/?target=http://www.insecure.org/nmap/data/nmap.dtd" >http://www.insecure.org/nmap/data/nmap.dtd <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>获取。</p><p>XML提供了可供软件解析的稳定格式输出，主要的计算机 语言都提供了免费的XML解析器，如C&#x2F;C++，Perl，Python和Java。 针对这些语言有一些捆绑代码用于处理Nmap的输出和特定的执行程序。 例如perl CPAN中的<a class="link"   href="https://link.zhihu.com/?target=http://sourceforge.net/projects/nmap-scanner/" >Nmap::Scanner <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 和<a class="link"   href="https://link.zhihu.com/?target=http://www.nmapparser.com/" >Nmap::Parser <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。 对几乎所有与Nmap有接口的主要应用来说，XML是首选的格式。</p><p>XML输出引用了一个XSL样式表，用于格式化输出结果，类似于 HTML。最方便的方法是将XML输出加载到一个Web浏览器，如Firefox 或IE。由于nmap.xsl文件的绝对 路径，因此通常只能在运行了Nmap的机器上工作(或类似配置的机器)。 类似于任何支持Web机器的HTML文件，–stylesheet 选项可用于建立可移植的XML文件。</p><h2 id="oS-ScRipT-KIdd-3-oUTpuT"><a href="#oS-ScRipT-KIdd-3-oUTpuT" class="headerlink" title="-oS  (ScRipT KIdd|3 oUTpuT)"></a>-oS <filespec> (ScRipT KIdd|3 oUTpuT)</h2><p>脚本小子输出类似于交互工具输出，这是一个事后处理，适合于 ‘l33t HaXXorZ， 由于原来全都是大写的Nmap输出。这个选项和脚本小子开了玩笑，看上去似乎是为了 “帮助他们”。</p><h2 id="oG-Grep输出"><a href="#oG-Grep输出" class="headerlink" title="-oG  (Grep输出)"></a>-oG <filespec> (Grep输出)</h2><p>这种方式最后介绍，因为不建议使用。XML输格式很强大，便于有经验 的用户使用。XML是一种标准，由许多解析器构成，而Grep输届更简化。XML 是可扩展的，以支持新发布的Nmap特点。使用Grep输出的目的是忽略这些 特点，因为没有足够的空间。</p><p>然面，Grep输出仍然很常使用。它是一种简单格式，每行一个主机，可以 通过UNIX工具(如grep、<a class="link"   href="https://zhida.zhihu.com/search?content_id=120463183&content_type=Article&match_order=1&q=awk&zhida_source=entity" >awk <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>、cut、sed、diff)和Perl方便地查找和分解。常可 用于在命令行上进行一次性测式。查找ssh端口打开或运行Sloaris的主机，只需 要一个简单的grep主机说明，使用通道并通过awk或cut命令打印所需的域。</p><p>Grep输出可以包含注释(每行由#号开始)。每行由6个标记的域组成，由制表符及 冒号分隔。这些域有主机，端口， 协议，忽略状态， 操作系统，序列号， IPID和状态。</p><p>这些域中最重要的是Ports，它提供 了所关注的端口的细节，端口项由逗号分隔。每个端口项代表一个所关注的端口， 每个子域由&#x2F;分隔。这些子域有：端口号， 状态，协议， 拥有者，服务， SunRPCinfo和版本信息。</p><p>对于XML输出，本手册无法列举所有的格式，有关Nmap Grep输出的更详细信息可 查阅<a class="link"   href="https://link.zhihu.com/?target=http://www.unspecific.com/nmap-oG-output" >http://www.unspecific.com/nmap-oG-output <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p><h2 id="oA-输出至所有格式"><a href="#oA-输出至所有格式" class="headerlink" title="-oA  (输出至所有格式)"></a>-oA <basename> (输出至所有格式)</h2><p>为使用方便，利用-oA<basename>选项 可将扫描结果以标准格式、XML格式和Grep格式一次性输出。分别存放在 <basename>.nmap，<basename>.xml和 <basename>.gnmap文件中。也可以在文件名前 指定目录名，如在UNIX中，使用~&#x2F;nmaplogs&#x2F;foocorp&#x2F;， 在Window中，使用c:\hacking\sco on Windows。</p><p>细节和调试选项</p><h2 id="v-提高输出信息的详细度"><a href="#v-提高输出信息的详细度" class="headerlink" title="-v (提高输出信息的详细度)"></a>-v (提高输出信息的详细度)</h2><p>通过提高详细度，Nmap可以输出扫描过程的更多信息。 输出发现的打开端口，若Nmap认为扫描需要更多时间会显示估计 的结束时间。这个选项使用两次，会提供更详细的信息。这个选 项使用两次以上不起作用。</p><p>大部分的变化仅影响交互式输出，也有一些影响标准和脚本 小子输出。其它输出类型由机器处理，此时Nmap默认提供详细的信 息，不需要人工干预。然而，其它模式也会有一些变化，省略一些 细节可以减小输出大小。例如，Grep输出中的注释行提供所有扫描 端口列表，但由于这些信息过长，因此只能在细节模式中输出。</p><h2 id="d-level-提高或设置调试级别"><a href="#d-level-提高或设置调试级别" class="headerlink" title="-d [level] (提高或设置调试级别)"></a>-d [level] (提高或设置调试级别)</h2><p>当详细模式也不能为用户提供足够的数据时，使用调试可以得到更 多的信息。使用细节选项(-v)时，可启用命令行参数 (-d)，多次使用可提高调试级别。也可在-d 后面使用参数设置调试级别。例如，-d9设定级别9。这是 最高的级别，将会产生上千行的输出，除非只对很少的端口和目标进行简单扫描。</p><p>如果Nmap因为Bug而挂起或者对Nmap的工作及原理有疑问，调试输出 非常有效。主要是开发人员用这个选项，调试行不具备自我解释的特点。 例如，Timeoutvals: srtt: -1 rttvar: -1 to: 1000000 delta 14987 &#x3D;&#x3D;&gt; srtt: 14987 rttvar: 14987 to: 100000。如果对某行输出不明白， 可以忽略、查看<a class="link"   href="https://zhida.zhihu.com/search?content_id=120463183&content_type=Article&match_order=1&q=%E6%BA%90%E4%BB%A3%E7%A0%81&zhida_source=entity" >源代码 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>或向开发列表(nmap-dev)求助。有些输出行会有自 我解释的特点，但随着调试级别的升高，会越来越含糊。</p><h2 id="–packet-trace-跟踪发送和接收的报文"><a href="#–packet-trace-跟踪发送和接收的报文" class="headerlink" title="–packet-trace (跟踪发送和接收的报文)"></a>–packet-trace (跟踪发送和接收的报文)</h2><p>要求Nmap打印发送和接收的每个报文的摘要，通常用于 调试，有助于新用户更好地理解Nmap的真正工作。为避免输出过 多的行，可以限制扫描的端口数，如-p20-30。 如果只需进行版本检测，使用–version-trace。</p><h2 id="–iflist-列举接口和路由"><a href="#–iflist-列举接口和路由" class="headerlink" title="–iflist (列举接口和路由)"></a>–iflist (列举接口和路由)</h2><p>输出Nmap检测到的接口列表和系统路由，用于调试路由 问题或设备描述失误(如Nmap把PPP连接当作以太网对待)。</p><p>其它输出选项</p><h2 id="–append-output-在输出文件中添加"><a href="#–append-output-在输出文件中添加" class="headerlink" title="–append-output (在输出文件中添加)"></a>–append-output (在输出文件中添加)</h2><p>当使用文件作为输出格式，如-oX或-oN， 默认该文件被覆盖。如果希望文件保留现有内容，将结果添加在现 有文件后面，使用–<a class="link"   href="https://zhida.zhihu.com/search?content_id=120463183&content_type=Article&match_order=2&q=append-output&zhida_source=entity" >append-output <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>选项。所有指 定的输出文件都被添加。但对于XML(-oX)扫描输出 文件无效，无法正常解析，需要手工修改。</p><h2 id="–resume-继续中断的扫描"><a href="#–resume-继续中断的扫描" class="headerlink" title="–resume  (继续中断的扫描)"></a>–resume <filename> (继续中断的扫描)</h2><p>一些扩展的Nmap运行需要很长的时间 – 以天计算，这类扫描 往往不会结束。可以进行一些限制，禁止Nmap在工作时间运行，导致 网络中断、运行Nmap的主机计划或非计划地重启、或者Nmap自己中断。 运行Nmap的管理员可以因其它原因取消运行，按下ctrl-C 即可。从头开始启动扫描可能令人不快，幸运的是，如果标准扫描 (-oN)或Grep扫描(-oG)日志 被保留，用户可以要求Nmap恢复终止的扫描，只需要简单地使用选项 –resume并说明标准&#x2F;Grep扫描输出文件，不允许 使用其它参数，Nmap会解析输出文件并使用原来的格式输出。使用方式 如nmap –resume <logfilename>。 Nmap将把新地结果添加到文件中，这种方式不支持XML输出格式，原因是 将两次运行结果合并至一个XML文件比较困难。</p><h2 id="–stylesheet-设置XSL样式表，转换XML输出"><a href="#–stylesheet-设置XSL样式表，转换XML输出" class="headerlink" title="–stylesheet  (设置XSL样式表，转换XML输出)"></a>–stylesheet <path or URL> (设置XSL样式表，转换XML输出)</h2><p>Nmap提从了XSL样式表nmap.xsl，用于查看 或转换XML输出至HTML。XML输出包含了一个xml-stylesheet， 直接指向nmap.xml文件， 该文件由Nmap安装(或位于Windows当前工作目录)。在Web浏览器 中打开Nmap的XML输出时，将会在文件系统中寻找nmap.xsl文件， 并使用它输出结果。如果希望使用不同的样式表，将它作为 –stylesheet的参数，必段指明完整的路 径或URL，常见的调用方式是–stylesheet <a class="link"   href="https://link.zhihu.com/?target=http://www.insecure.org/nmap/data/nmap.xsl" >http://www.insecure.org/nmap/data/nmap.xsl <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。 这告诉浏览器从<a class="link"   href="https://link.zhihu.com/?target=http://Insecire.Org" >http://Insecire.Org <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>中加载最新的样式表。这使得 没安装Nmap(和nmap.xsl) 的机器中可以方便地查看结果。因此，URL更方便使用，本地文件系统 的nmap.xsl用于默认方式。</p><h2 id="–no-stylesheet-忽略XML声明的XSL样式表"><a href="#–no-stylesheet-忽略XML声明的XSL样式表" class="headerlink" title="–no-stylesheet (忽略XML声明的XSL样式表)"></a>–no-stylesheet (忽略XML声明的XSL样式表)</h2><p>使用该选项禁止Nmap的XML输出关联任何XSL样式表。 xml-stylesheet指示被忽略。</p><h1 id="其它选项"><a href="#其它选项" class="headerlink" title="其它选项"></a>其它选项</h1><p>本节描述一些重要的(和并不重要)的选项，这些选项 不适合其它任何地方。</p><h2 id="6-启用IPv6扫描"><a href="#6-启用IPv6扫描" class="headerlink" title="-6 (启用IPv6扫描)"></a>-6 (启用IPv6扫描)</h2><p>从2002年起，Nmap提供对IPv6的一些主要特征的支持。ping扫描(TCP-only)、 连接扫描以及版本检测都支持IPv6。除增加-6选项外， 其它命令语法相同。当然，必须使用IPv6地址来替换主机名，如 3ffe:7501:4819:2000:210:f3ff:fe03:14d0。 除“所关注的端口”行的地址部分为IPv6地址。</p><p>IPv6目前未在全球广泛采用，目前在一些国家(亚洲)应用较多， 一些高级操作系统支持IPv6。使用Nmap的IPv6功能，扫描的源和目 的都需要配置IPv6。如果ISP(大部分)不分配IPv6地址，Nmap可以采用 免费的隧道代理。一种较好的选择是BT Exact，位于<a class="link"   href="https://link.zhihu.com/?target=https://tb.ipv6.btexact.com/" >https://tb.ipv6.btexact.com/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。 此外，还有Hurricane Electric，位于<a class="link"   href="https://link.zhihu.com/?target=http://ipv6tb.he.net/" >http://ipv6tb.he.net/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。6to4隧道是 另一种常用的免费方法。</p><h2 id="A-激烈扫描模式选项"><a href="#A-激烈扫描模式选项" class="headerlink" title="-A (激烈扫描模式选项)"></a>-A (激烈扫描模式选项)</h2><p>这个选项启用额外的高级和高强度选项，目前还未确定代表 的内容。目前，这个选项启用了操作系统检测(-O) 和版本扫描(-sV)，以后会增加更多的功能。 目的是启用一个全面的扫描选项集合，不需要用户记忆大量的 选项。这个选项仅仅启用功能，不包含用于可能所需要的 时间选项(如-T4)或细节选项(-v)。</p><h2 id="–datadir-说明用户Nmap数据文件位置"><a href="#–datadir-说明用户Nmap数据文件位置" class="headerlink" title="–datadir  (说明用户Nmap数据文件位置)"></a>–datadir <directoryname> (说明用户Nmap<a class="link"   href="https://zhida.zhihu.com/search?content_id=120463183&content_type=Article&match_order=1&q=%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6&zhida_source=entity" >数据文件 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>位置)</h2><p>Nmap在运行时从文件中获得特殊的数据，这些文件有 nmap-service-probes， nmap-services， nmap-protocols， nmap-rpc， nmap-mac-prefixes和 nmap-os-fingerprints。Nmap首先 在–datadir选项说明的目录中查找这些文件。 未找到的文件，将在BMAPDIR环境变量说明的目录中查找。 接下来是用于真正和有效UID的~&#x2F;.nmap 或Nmap可执行代码的位置(仅Win32)；然后是是编译位置， 如&#x2F;usr&#x2F;local&#x2F;share&#x2F;nmap 或&#x2F;usr&#x2F;share&#x2F;nmap。 Nmap查找的最后一个位置是当前目录。</p><h2 id="–send-eth-使用原以太网帧发送"><a href="#–send-eth-使用原以太网帧发送" class="headerlink" title="–send-eth (使用原以太网帧发送)"></a>–send-eth (使用原以太网帧发送)</h2><p>要求Nmap在以太网(数据链路)层而不是IP(网络层)发送 报文。默认方式下，Nmap选择最适合其运行平台的方式，原套接 字(IP层)是UNIX主机最有效的方式，而以太网帧最适合Windows操作 系统，因为Microsoft禁用了原<a class="link"   href="https://zhida.zhihu.com/search?content_id=120463183&content_type=Article&match_order=1&q=%E5%A5%97%E6%8E%A5%E5%AD%97&zhida_source=entity" >套接字 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>支持。在UNIX中，如果没有其 它选择(如无以太网连接)，不管是否有该选项，Nmap都使用原IP包。</p><h2 id="–send-ip-在原IP层发送"><a href="#–send-ip-在原IP层发送" class="headerlink" title="–send-ip (在原IP层发送)"></a>–send-ip (在原IP层发送)</h2><p>要求Nmap通过原IP套接字发送报文，而不是低层的以 太网帧。这是–send-eth选项的补充。</p><h2 id="–privileged-假定用户具有全部权限"><a href="#–privileged-假定用户具有全部权限" class="headerlink" title="–privileged (假定用户具有全部权限)"></a>–<a class="link"   href="https://zhida.zhihu.com/search?content_id=120463183&content_type=Article&match_order=1&q=privileged&zhida_source=entity" >privileged <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> (假定用户具有全部权限)</h2><p>告诉Nmap假定其具有足够的权限进行源套接字包发送、 报文捕获和类似UNIX系统中根用户操作的权限。默认状态下， 如果由getuid()请求的类似操作不为0，Nmap将退出。 –privileged在具有Linux内核性能的类似 系统中使用非常有效，这些系统配置允许非特权用户可以进行 原报文扫描。需要明确的是，在其它选项之前使用这些需要权 限的选项(SYN扫描、操作系统检测等)。Nmap-PRIVILEGED变量 设置等价于–privileged选项。</p><h2 id="–interactive-在交互模式中启动"><a href="#–interactive-在交互模式中启动" class="headerlink" title="–interactive (在交互模式中启动)"></a>–interactive (在交互模式中启动)</h2><p>在交互模式中启动Nmap，提供交互式的Nmap提示，便于 进行多个扫描(同步或后台方式)。对于从多用户系统中扫描 的用户非常有效，这些用户常需要测试他们的安全性，但不希望 系统中的其它用户知道他们扫描哪些系统。使用–interactive 激活这种方式，然后输入h可 获得帮助信息。由于需要对正确的shell程序和整个功能非常熟悉， 这个选项很少使用。这个选项包含了一个!操作符，用于执行shell命令， 这是不安装Nmap setuid root的多个原因之一。</p><h2 id="V-–version-打印版本信息"><a href="#V-–version-打印版本信息" class="headerlink" title="-V; –version (打印版本信息)"></a>-V; –version (打印版本信息)</h2><p>打印Nmap版本号并退出。</p><h2 id="h-–help-打印帮助摘要面"><a href="#h-–help-打印帮助摘要面" class="headerlink" title="-h; –help (打印帮助摘要面)"></a>-h; –help (打印帮助摘要面)</h2><p>打印一个短的帮助屏幕，列出大部分常用的 命令选项，这个功能与不带参数运行Nmap是相同的。</p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>下面给出一些实例，简单的、复杂的到深奥的。为更具体，一 些例子使用了实际的IP地址和域名。在这些位置，可以使用你自己网络 的地址&#x2F;域名替换。注意，扫描其它网络不一定合法，一些网络管理员不愿看到 未申请过的扫描，会产生报怨。因此，先获得允许是最好的办法。</p><p>如果是为了测试，<a class="link"   href="https://link.zhihu.com/?target=http://scanme.nmap.org" >http://scanme.nmap.org <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 允许被扫描。但仅允许使用Nmap扫描并禁止测试漏洞或进行DoS攻击。为 保证带宽，对该主机的扫描每天不要超过12次。如果这个免费扫描服务被 滥用，系统将崩溃而且Nmap将报告解析 指定的主机名&#x2F;IP地址失败：<a class="link"   href="https://link.zhihu.com/?target=http://scanme.nmap.org" >http://scanme.nmap.org <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。这些免 费扫描要求也适用于<a class="link"   href="https://link.zhihu.com/?target=http://scanme2.nmap.org" >http://scanme2.nmap.org <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>、 <a class="link"   href="https://link.zhihu.com/?target=http://scanme3.nmap.org" >http://scanme3.nmap.org <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>等等，虽然这些 主机目前还不存在。</p><h2 id="nmap-v-http-scanme-nmap-org"><a href="#nmap-v-http-scanme-nmap-org" class="headerlink" title="nmap -v http://scanme.nmap.org"></a>nmap -v <a class="link"   href="https://link.zhihu.com/?target=http://scanme.nmap.org" >http://scanme.nmap.org <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><p>这个选项扫描主机<a class="link"   href="https://link.zhihu.com/?target=http://scanme.nmap.org" >http://scanme.nmap.org <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>中 所有的保留TCP端口。选项-v启用细节模式。</p><h2 id="nmap-sS-O-http-scanme-nmap-org-24"><a href="#nmap-sS-O-http-scanme-nmap-org-24" class="headerlink" title="nmap -sS -O http://scanme.nmap.org/24"></a>nmap -sS -O <a class="link"   href="https://link.zhihu.com/?target=http://scanme.nmap.org/24" >http://scanme.nmap.org/24 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><p>进行秘密SYN扫描，对象为主机Saznme所在的“C类”网段 的255台主机。同时尝试确定每台工作主机的操作系统类型。因为进行SYN扫描 和操作系统检测，这个扫描需要有根权限。</p><h2 id="nmap-sV-p-22，53，110，143，4564-198-116-0-255-1-127"><a href="#nmap-sV-p-22，53，110，143，4564-198-116-0-255-1-127" class="headerlink" title="nmap -sV -p 22，53，110，143，4564 198.116.0-255.1-127"></a>nmap -sV -p 22，53，110，143，4564 198.116.0-255.1-127</h2><p>进行主机列举和TCP扫描，对象为B类188.116网段中255个8位子网。这 个测试用于确定系统是否运行了sshd、DNS、imapd或4564端口。如果这些端口 打开，将使用版本检测来确定哪种应用在运行。</p><h2 id="nmap-v-iR-100000-P0-p-80"><a href="#nmap-v-iR-100000-P0-p-80" class="headerlink" title="nmap -v -iR 100000 -P0 -p 80"></a>nmap -v -iR 100000 -P0 -p 80</h2><p>随机选择100000台主机扫描是否运行Web服务器(80端口)。由起始阶段 发送探测报文来确定主机是否工作非常浪费时间，而且只需探测主机的一个端口，因 此使用-P0禁止对主机列表。</p><h2 id="nmap-P0-p80-oX-logs-pb-port80scan-xml-oG-logs-pb-port80scan-gnmap-216-163-128-20-20"><a href="#nmap-P0-p80-oX-logs-pb-port80scan-xml-oG-logs-pb-port80scan-gnmap-216-163-128-20-20" class="headerlink" title="nmap -P0 -p80 -oX logs&#x2F;pb-port80scan.xml -oG logs&#x2F;pb-port80scan.gnmap 216.163.128.20&#x2F;20"></a>nmap -P0 -p80 -oX logs&#x2F;pb-port80scan.xml -oG logs&#x2F;pb-port80scan.gnmap 216.163.128.20&#x2F;20</h2><p>扫描4096个IP地址，查找Web服务器(不ping)，将结果以Grep和XML格式保存。</p><h2 id="host-l-http-company-com-cut-d-f-4-nmap-v-iL"><a href="#host-l-http-company-com-cut-d-f-4-nmap-v-iL" class="headerlink" title="host -l http://company.com | cut -d -f 4 | nmap -v -iL -"></a>host -l <a class="link"   href="https://link.zhihu.com/?target=http://company.com" >http://company.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> | cut -d -f 4 | nmap -v -iL -</h2><p>进行DNS区域传输，以发现<a class="link"   href="https://link.zhihu.com/?target=http://company.com" >http://company.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>中的主机，然后将IP地址提供给 Nmap。上述命令用于GNU&#x2F;Linux – 其它系统进行区域传输时有不同的命令。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目标说明&quot;&gt;&lt;a href=&quot;#目标说明&quot; class=&quot;headerlink&quot; title=&quot;目标说明&quot;&gt;&lt;/a&gt;目标说明&lt;/h1&gt;&lt;p&gt;除了选项，所有出现在Nmap命令行上的都被视为对目标主机的说明。 最简单的情况是指定一个目标IP地址或主机名。&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="网络技术" scheme="https://blog.ihacker.top/categories/%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="工具手册" scheme="https://blog.ihacker.top/tags/%E5%B7%A5%E5%85%B7%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>美国超大型数据泄露事件曝光：超1亿人数据被盗</title>
    <link href="https://blog.ihacker.top/archives/6cecb686b301.html"/>
    <id>https://blog.ihacker.top/archives/6cecb686b301.html</id>
    <published>2024-10-28T15:19:35.000Z</published>
    <updated>2024-10-31T09:29:55.747Z</updated>
    
    <content type="html"><![CDATA[<p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/%E7%BE%8E%E5%9B%BD%E8%B6%85%E5%A4%A7%E5%9E%8B%E6%95%B0%E6%8D%AE%E6%B3%84%E9%9C%B2%E4%BA%8B%E4%BB%B6%E6%9B%9D%E5%85%89%EF%BC%9A%E8%B6%851%E4%BA%BF%E4%BA%BA%E6%95%B0%E6%8D%AE%E8%A2%AB%E7%9B%97/19298008-e9bd0a4c1b1239d5.webp"                      alt="image.png"                ></p><p>联合健康（UnitedHealth）首次证实，在 Change Healthcare 勒索软件攻击中，有超过 1 亿人的个人信息和医疗保健数据被盗，这是近年来最大的医疗保健数据泄露事件。</p><p>今年 5 月，UnitedHealth 首席执行官安德鲁-威蒂（Andrew Witty）在国会听证会上警告说，“可能有三分之一 ”的美国人健康数据在这次攻击中暴露。</p><p>一个月后，Change Healthcare 发布了一份数据泄露通知，警告称 2 月份针对 Change Healthcare 的勒索软件攻击暴露了 “相当一部分美国人 ”的 “大量数据”。</p><p>今天，美国卫生与公众服务部公民权利办公室数据泄露门户网站将受影响的总人数更新为 1 亿人，这也是 Change Healthcare 的母公司 UnitedHealth 首次为此次数据泄露事件提供官方数字。</p><p>上周二（10月22日） ，Change Healthcare通知OCR，已就此次数据泄露事件发出约1亿份个人通知，”OCR网站上更新的常见问题中写道。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/%E7%BE%8E%E5%9B%BD%E8%B6%85%E5%A4%A7%E5%9E%8B%E6%95%B0%E6%8D%AE%E6%B3%84%E9%9C%B2%E4%BA%8B%E4%BB%B6%E6%9B%9D%E5%85%89%EF%BC%9A%E8%B6%851%E4%BA%BF%E4%BA%BA%E6%95%B0%E6%8D%AE%E8%A2%AB%E7%9B%97/19298008-9e50bc720bf698c4.webp"                      alt="image.png"                ></p><p>受 Change Healthcare 数据泄露事件影响的最新人数，资料来源：HHS</p><p>Change Healthcare 自 6 月份以来发送的数据泄露通知称，在 2 月份的勒索软件攻击中，大量敏感信息被盗，其中包括：</p><ul><li>健康保险信息（如主要、次要或其他健康计划&#x2F;保单、保险公司、会员&#x2F;团体 ID 编号以及医疗补助-医疗保险-政府付款人 ID 编号）；</li><li>健康信息（如医疗记录编号、医疗服务提供者、诊断、药品、检查结果、图像、护理和治疗）；</li><li>账单、索赔和付款信息（如索赔号、账号、账单代码、付款卡、财务和银行信息、已付款项和应付余额）；</li><li>和&#x2F;或其他个人信息，如社会安全号、驾照或州身份证号码或护照号码。</li></ul><p>每个人的信息可能不同，并非每个人的病史都会被暴露。</p><p><strong>Change Healthcare 勒索软件攻击</strong></p><p>这次数据泄露事件是由 UnitedHealth 子公司 Change Healthcare 2 月份遭受的勒索软件攻击引起的，该攻击导致美国医疗系统大面积中断。</p><p>该公司 IT 系统的中断导致医生和药店无法提交报销申请，药店也无法接受折扣处方卡，导致患者不得不支付全额药费。</p><p>BlackCat 勒索软件团伙（又名 ALPHV）使用窃取的凭证入侵了该公司的 Citrix 远程访问服务，而该服务没有启用多因素身份验证。</p><p>在攻击过程中，威胁者窃取了 6 TB 的数据，并最终加密了网络上的计算机，导致公司关闭 IT 系统以防止攻击扩散。</p><p>联合健康集团承认支付了赎金，以获得解密器并让威胁者删除被盗数据。据实施攻击的 BlackCat 勒索软件附属公司称，支付的赎金据称为 2200 万美元。</p><p>这笔赎金本应由附属公司和勒索软件运营公司平分，但 BlackCat 突然关闭，将全部赎金据为己有，并实施了退出骗局。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/%E7%BE%8E%E5%9B%BD%E8%B6%85%E5%A4%A7%E5%9E%8B%E6%95%B0%E6%8D%AE%E6%B3%84%E9%9C%B2%E4%BA%8B%E4%BB%B6%E6%9B%9D%E5%85%89%EF%BC%9A%E8%B6%851%E4%BA%BF%E4%BA%BA%E6%95%B0%E6%8D%AE%E8%A2%AB%E7%9B%97/19298008-a99e577821a76676.webp"                      alt="image.png"                ></p><p>ALPHV 附属公司声称被黑猫公司诈骗，消息来源 Dmitry Smilyanets</p><p>然而，Change Healthcare 的问题并没有就此结束，因为该联盟声称他们仍然拥有该公司的数据，并且没有按照承诺删除这些数据。该联盟与一个名为 RansomHub 的新勒索软件合作，开始泄露部分被盗数据，并要求支付额外费用才能不公开数据。</p><p>几天后，RansomHub 数据泄漏网站上的 Change Healthcare 条目神秘消失，这可能表明联合健康支付了第二笔赎金。</p><p>4月，联合健康曾表示，Change Healthcare 勒索软件攻击造成了 8.72 亿美元的损失，而截至 9 月 30 日损失预计增加到 24.5 亿美元。</p><blockquote><p>转载来自：<a class="link"   href="https://www.freebuf.com/news/413806.html" >https://www.freebuf.com/news/413806.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;/uploads/images/%E7%BE</summary>
      
    
    
    
    <category term="安全资讯" scheme="https://blog.ihacker.top/categories/%E5%AE%89%E5%85%A8%E8%B5%84%E8%AE%AF/"/>
    
    
    <category term="国际资讯" scheme="https://blog.ihacker.top/tags/%E5%9B%BD%E9%99%85%E8%B5%84%E8%AE%AF/"/>
    
  </entry>
  
  <entry>
    <title>莫让“大意”泄密，成为保密“大敌”</title>
    <link href="https://blog.ihacker.top/archives/c1b30cb9d154.html"/>
    <id>https://blog.ihacker.top/archives/c1b30cb9d154.html</id>
    <published>2024-10-24T14:43:31.000Z</published>
    <updated>2024-10-31T09:29:55.747Z</updated>
    
    <content type="html"><![CDATA[<p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/%E8%8E%AB%E8%AE%A9%E2%80%9C%E5%A4%A7%E6%84%8F%E2%80%9D%E6%B3%84%E5%AF%86%EF%BC%8C%E6%88%90%E4%B8%BA%E4%BF%9D%E5%AF%86%E2%80%9C%E5%A4%A7%E6%95%8C%E2%80%9D/19298008-ddb2ef79cec84445.webp"                      alt="image.png"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/%E8%8E%AB%E8%AE%A9%E2%80%9C%E5%A4%A7%E6%84%8F%E2%80%9D%E6%B3%84%E5%AF%86%EF%BC%8C%E6%88%90%E4%B8%BA%E4%BF%9D%E5%AF%86%E2%80%9C%E5%A4%A7%E6%95%8C%E2%80%9D/19298008-fcb462d64498a950.webp"                      alt="image.png"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/%E8%8E%AB%E8%AE%A9%E2%80%9C%E5%A4%A7%E6%84%8F%E2%80%9D%E6%B3%84%E5%AF%86%EF%BC%8C%E6%88%90%E4%B8%BA%E4%BF%9D%E5%AF%86%E2%80%9C%E5%A4%A7%E6%95%8C%E2%80%9D/19298008-e497a1036547e785.webp"                      alt="image.png"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/%E8%8E%AB%E8%AE%A9%E2%80%9C%E5%A4%A7%E6%84%8F%E2%80%9D%E6%B3%84%E5%AF%86%EF%BC%8C%E6%88%90%E4%B8%BA%E4%BF%9D%E5%AF%86%E2%80%9C%E5%A4%A7%E6%95%8C%E2%80%9D/19298008-4853b5287278b181.webp"                      alt="image.png"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/%E8%8E%AB%E8%AE%A9%E2%80%9C%E5%A4%A7%E6%84%8F%E2%80%9D%E6%B3%84%E5%AF%86%EF%BC%8C%E6%88%90%E4%B8%BA%E4%BF%9D%E5%AF%86%E2%80%9C%E5%A4%A7%E6%95%8C%E2%80%9D/19298008-0f9bd2cecaea2a0a.webp"                      alt="image.png"                ></p><blockquote><p>转自：<a class="link"   href="https://m.thepaper.cn/baijiahao_29123969" >https://m.thepaper.cn/baijiahao_29123969 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;/uploads/images/%E8%8E</summary>
      
    
    
    
    <category term="安全资讯" scheme="https://blog.ihacker.top/categories/%E5%AE%89%E5%85%A8%E8%B5%84%E8%AE%AF/"/>
    
    
    <category term="法律普及" scheme="https://blog.ihacker.top/tags/%E6%B3%95%E5%BE%8B%E6%99%AE%E5%8F%8A/"/>
    
  </entry>
  
  <entry>
    <title>小组2024102001号会议记录</title>
    <link href="https://blog.ihacker.top/archives/5001088f54a8.html"/>
    <id>https://blog.ihacker.top/archives/5001088f54a8.html</id>
    <published>2024-10-20T21:45:21.000Z</published>
    <updated>2024-10-31T09:29:55.747Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="文章不能被校验">  <script id="hbeData" type="hbeData" data-hmacdigest="78d37c57f5f2470a3520ec784f63ca356118521855d63723c2b937f24ec3a6fc">f104a0ed00ef1fb98c8757078359418e3d582c8effcb76d2277e7060e6ee375d54827f68a450e4eab8901746e2b2859c53feb0bdc22e8ad522f26311d9b16b4e2aea655b1800a1cddc7b25a73746721a652c864ca97e02e8d021d3557114bcf8e072de0a88dd0bf0930040069c043e78b9efe53204b3d453e177da22147660983053316f3680881e5ffe55889271536d0478ac8666a9a298b0aa777f22dc13bf915be2845f09144921359401288da934ead65fb2fcfe2779d9c0c32c49c92a8430d2a4d6eb9f6ba9bcfa4cb099931bed8c11d5a66e313666b6755b24bf2009dcf07eecf32d8a61cb8667be2b8689e546ad39f1c31648cf08aef0067b8c4f8dc281a237a3618db0dbbd5e9d4b1115c4fae36354d6a83fd1e732c9ca93c232e8a101a0cbc9de7a26d727c840d1d14fcd139639f616538dbe28bf20d8c3682dc0122e06ae11749c629c6129c77beeee523468c00cb4147862fd6e152483955bf796edf53af639cf6cc5b3c28e90a6a15cb7</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码</span>      </label>    </div>  </div></div><link href="/css/hbe.style.css" rel="stylesheet" type="text/css"><script data-swup-reload-script type="module" src="/js/plugins/hbe.js"></script><script data-swup-reload-script type="module">import {initHBE} from "/js/plugins/hbe.js";  console.log("hexo-blog-encrypt: loaded.");    initHBE();</script>]]></content>
    
    
    <summary type="html">&#92;*&#92;* 加密内容 &#92;*&#92;*</summary>
    
    
    
    <category term="内部公告" scheme="https://blog.ihacker.top/categories/%E5%86%85%E9%83%A8%E5%85%AC%E5%91%8A/"/>
    
    
    <category term="内部公告" scheme="https://blog.ihacker.top/tags/%E5%86%85%E9%83%A8%E5%85%AC%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>揭露美国炒作“伏特台风”行动计划真相</title>
    <link href="https://blog.ihacker.top/archives/851d2823ebd9.html"/>
    <id>https://blog.ihacker.top/archives/851d2823ebd9.html</id>
    <published>2024-10-16T09:49:46.000Z</published>
    <updated>2024-10-31T09:29:55.747Z</updated>
    
    <content type="html"><![CDATA[<p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/%E6%8F%AD%E9%9C%B2%E7%BE%8E%E5%9B%BD%E7%82%92%E4%BD%9C%E2%80%9C%E4%BC%8F%E7%89%B9%E5%8F%B0%E9%A3%8E%E2%80%9D%E8%A1%8C%E5%8A%A8%E8%AE%A1%E5%88%92%E7%9C%9F%E7%9B%B8/19298008-139337eb7b586400.webp"                      alt="image.png"                ></p><p>本文转自【央视新闻客户端】；</p><p>今年4月15日、7月8日，中国国家计算机病毒应急处理中心等机构连续发布了两次专题报告，揭露了美方利用所谓“伏特台风”虚假叙事行动计划对我国抹黑的真实意图。今天（14日）我国网络安全机构第三次发布专题报告，进一步公开美国政府机构和“五眼联盟”国家针对中国和德国等其他国家，以及全球互联网用户实施网络间谍窃听、窃密活动，并掌握了美国政府机构通过各种手段嫁祸他国的相关证据，另外还有他们采取“供应链”攻击，在互联网设备产品中植入后门等事实，彻底揭穿所谓“伏特台风”这场由美国联邦政府自导自演的政治闹剧。</p><p><strong>美研发嫁祸他国隐身”工具包” 代号”大理石”</strong></p><p>报告显示，长期以来，美国在网络空间积极推行“防御前置”战略，并实施“前出狩猎”战术行动，也就是在对手国家周边地区部署网络战部队，对这些国家的网上目标进行抵近侦察和网络渗透。为适应这种战术需要，美国情报机构专门研发了掩盖自身恶意网络攻击行为、嫁祸他国的隐身“工具包”，代号“大理石”。</p><p><strong>国家计算机病毒应急处理中心高级工程师 杜振华：</strong>它的功能主要是对这种网络武器，也就是像间谍软件或者这些恶意程序当中的代码中的这些可识别的特征进行混淆，甚至是擦除。这样起到了一个效果，就像是把开发者的指纹给擦除了，也相当于像把枪械武器的膛线改变了，所以这样就造成从技术上对这种武器的来源的溯源就变得非常困难。<br>技术团队调查发现，根据“大理石”工具框架源代码及其注释显示，它被确定为一个机密级（且不可向国外透露）的武器研发计划，起始时间不晚于2015年。“大理石”工具框架可以使用超过100种混淆算法，它能将源代码文件中可读的变量名、字符串等替换为不可读（不可识别）内容，并且可以插入特定的干扰字符串。</p><p><strong>国家计算机病毒应急处理中心高级工程师 杜振华：</strong>我们可以看到这里边有阿拉伯语，有中文，有俄语，有朝鲜语，还有波斯语，那么他在缓冲区做好混淆的这种数据之后，那么会把缓冲区的数据写入到指定的位置，或者是相应的程序的文件当中，那么实现对这种网络武器的痕迹的故意的植入。</p><p><strong>安天科技集团技术委员会副主任 李柏松：</strong>这是一种在网络攻击中比较常见的手段，相当于是，比如说a组织，他把自己伪装成了b组织，而这种伪装可以在好多个不同的环节出现。比如说他在架设他的命令控制服务器的过程中，比如说在他的窃密的木马开发过程中，好多个阶段都可以用这样的一些手法。而这个就使得他的攻击变得很难去溯源。</p><p>通过这些栽赃、虚构的手段，美国网络战部队和情报机构的黑客就能任意变换身份、变更形象，通过冒充其他国家的身份在全球实施网络攻击窃密活动，然后将这些行为栽赃给被冒充的非美国 “盟友”的国家。</p><p>技术团队通过掌握的证据发现，“伏特台风”行动就是一个典型的、精心设计的、符合美国资本集团利益的虚假信息行动，也就是所谓的“假旗”行动，其技战术与美国和“五眼联盟”国家情报机构所采用技战术完全吻合。</p><p><strong>美对全球互联网用户实施无差别监听</strong></p><p>我国网络安全机构发布的报告显示，美国政府机构之所以虚构出所谓中国背景的“伏特台风”网络攻击组织，目的就是为了继续把持《涉外情报监视法案》第“702条款”所赋予的“无证”监视权，以维持其庞大的“无差别”“无底线”监听计划。而正是有了“702条款”的相关权限，美国政府机构才能持续对全球互联网用户实施无差别监听，甚至直接从美国各大互联网企业的服务器上获取用户数据，是名副其实的网络空间“窥探者”。<br>技术团队调查发现，据美国国家安全局的内部绝密级资料显示，美国依托其在互联网布局建设中先天掌握的技术优势和地理位置优势，牢牢把持全球最重要的大西洋海底光缆和太平洋海底光缆等互联网“关键节点”，先后建立了7个国家级的全流量监听站。美国政府机构与英国国家网络安全中心紧密合作，对光缆中传输的数据进行解析和数据窃取，实现对全球互联网用户的无差别监听。</p><p><strong>国家计算机病毒应急处理中心高级工程师 杜振华：</strong>通过对这些光缆中的数字信号进行这种提取、汇聚、还原、解码、解密，那么就可以得到光缆通信数据当中的这些语音信息、文字信息、视频信息，甚至是“用户名密码”。那么这些情报它的受益方很多，主要是两个方面，一方面是美国自己，当然包括美国的军方情报机构，那么另外一方面其实还有一些是美国的情报合作伙伴，特别是像“五眼联盟”国家。</p><p>报告显示，为了将窃取的数据实时转化成可阅读、可检索的情报信息，美国国家安全局实施了两个重点工程项目，分别是“上游”（UpStream）项目和“棱镜”（Prism）项目，这两个项目分别承担数据存储和数据还原分析的功能。<br><strong>国家计算机病毒应急处理中心高级工程师 杜振华：</strong>“上游”项目其实顾名思义，那么它就是从海底光缆中把原始数据提取出来，汇聚形成一个巨大的数据水库，那么以供后续进行这种深度分析。那么棱镜计划就是在上游项目的基础上，对这个数据水库当中的这些流量进行深度的分析分类，这两者实际上是互为补充，那么同时也都是美国的网络监听项目的一个重要的组成部分。</p><p>据网络安全专家介绍，为了解决“上游”项目中加密数据破解和网络通信流量路径覆盖不全等突出问题，美国政府还会通过“棱镜”项目直接从微软、雅虎、谷歌、脸书、苹果等美国各大互联网企业的服务器上获取用户数据。<br>而“上游”和“棱镜”两个项目正是在《涉外情报监视法案》第“702条款”的授权下建设实施的，因此第“702条款”成为美国情报机构代表美国联邦政府合法、公开、持续窃取全球互联网链路数据的官方依据，也成为美国“窃密帝国”的扎实证据。</p><p><strong>目标国家被植入超过5万个间谍程序</strong></p><p>报告显示，为了满足情报需要，针对监听系统“盲区”的特定目标，美国国家安全局下属的“特定入侵行动办公室”会发动网络秘密入侵行动，受害目标主要集中在亚洲、东欧、非洲、中东和南美等地区，据技术团队掌握的证据显示，特定目标已经被植入的间谍程序超过5万个。</p><p>技术团队调查发现，在美国国家安全局的内部文件中显示，中国境内的主要城市几乎都在其网络秘密入侵行动范围内，大量的互联网资产已经遭到入侵，其中包括西北工业大学和武汉市地震监测中心所在地区。<br><strong>安天科技集团技术委员会副主任 李柏松：</strong>美方它是对间谍软件的控制有很多种不同的方式，比较易于理解的是从这种网络上的远程控制。另外他们有一个代号为“水蝮蛇”的这样的一个装备，看起来就像是个USB的接头一样，然后可以伪装成类似于键盘、鼠标这样的接口，他把这个装备接入到物理隔离网络的里面的设备上去，然后他把窃取的数据通过信号的方式发送出来，甚至实现对它的一个控制。</p><p>专家介绍，除了直接实施网络入侵行动窃取数据之外，针对一些防范等级高且入侵难度大的高价值目标，特别入侵行动办公室还会采取“供应链”攻击的方式，也就是在美国大型互联网企业或设备供应商的配合下，从物流环节拦截攻击目标，另外还会对攻击目标所采购的美国网络设备进行拆解并植入后门，然后重新打包发货给攻击目标。</p><p><strong>安天科技集团技术委员会副主任 李柏松：</strong>这种被做了手脚的设备得到了使用之后，它就会成为攻击者的一个突破口。攻击者可以利用它的漏洞，可以利用它的后门，在我们不知道的情况下进入到我们的内网。<br><strong>国家计算机病毒应急处理中心高级工程师 杜振华：</strong>它主要是针对这种防御能力比较强，那么攻击难度比较大的这些目标，特别是一些保密等级很高的这些目标，包括单位个人群体，那么因为它的这种隐蔽性非常强，所以它能够实现这种长期的潜伏的窃密活动。所以它造成的危害应该说是无论是从泄密度，还是说安全隐患的角度，因为它有可能造成这种网络的瘫痪，那么都是非常严重的。</p><p><strong>美方不断将网络攻击溯源政治化</strong></p><p>通过“702条款”的授权，美国情报机构建立了规模庞大的全球化互联网监听网络，向美国政府机构提供了大量高价值情报，使美国政府屡屡在外交、军事、经济、科技等领域占得先机，“702条款”以及与之相配套的互联网监听系统成为现阶段美国维持其霸权地位的“秘密武器”。</p><p>报告显示，在拥有强大的先发技术优势条件下，任何目标都有可能被美国联邦政府及其情报机构列入“重点监控名单”，其中包括一些美国的“盟友”国家法国、德国、日本，甚至普通美国公民。<br><strong>国家计算机病毒应急处理中心高级工程师 杜振华：</strong>那么这样的无差别的这种监听，无底线的这种监听，其实它的来源就是美国的对外情报监视法案第“702条款”。那么这个应该说在我们前面的报告里面提到又被称为无证监视法案，所以它这个权力是非常大的，而且是很少受到制约的，所以实际上是美国对外肆无忌惮地开展这种网络监听活动的一个根源。</p><p>专家介绍，为了维持庞大的监听计划，美国政府机构每年所需的经费预算也是相当惊人，而这正是美国联邦政府及其情报机构合谋策划、推动“伏特台风”计划的主要动力。</p><p><strong>国家计算机病毒应急处理中心高级工程师 杜振华：</strong>它每年或者是每天新增的数据都是惊人的，所以它要消耗的这种资源投入是非常惊人的，那么这个也需要大量的资金。所以“伏特台风”这种虚假叙事，实际上就是为了骗取国会为这些竞争项目投入更多的资金，当然这是它主要目的之一，同时因为这是一体的，所以他还要必须通过这种虚假事实去保住“702条款”的这样的一个无证监视的权利。当然同时他还可以达到抹黑和诋毁中国的目的。</p><p>报告指出，多年来，美国政府机构出于自身一己私利，不断将网络攻击溯源问题政治化，而微软等公司则为了迎合美国政客、政府机构和情报机构，出于提高自身商业利益考虑，打着“中国网络威胁论”的旗号，为“702条款”源源不断地输送情报。</p><p>中国一向反对政治操弄网络安全事件的技术调查，反对将网络攻击溯源归因问题政治化。报告再次呼吁，网络安全需要广泛的国际协作，广大网络安全企业和研究机构也应该专注于对网络安全威胁对抗技术的研究以及如何为用户提供更高质量的产品和服务。</p><p>（总台央视记者 张岗 陈庆滨 苗毅萌 王明义）</p><blockquote><p>转自：<a class="link"   href="https://baijiahao.baidu.com/s?id=1812850724221152084" >https://baijiahao.baidu.com/s?id=1812850724221152084 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;/uploads/images/%E6%8F</summary>
      
    
    
    
    <category term="安全资讯" scheme="https://blog.ihacker.top/categories/%E5%AE%89%E5%85%A8%E8%B5%84%E8%AE%AF/"/>
    
    
    <category term="网络入侵" scheme="https://blog.ihacker.top/tags/%E7%BD%91%E7%BB%9C%E5%85%A5%E4%BE%B5/"/>
    
    <category term="大国博弈" scheme="https://blog.ihacker.top/tags/%E5%A4%A7%E5%9B%BD%E5%8D%9A%E5%BC%88/"/>
    
  </entry>
  
  <entry>
    <title>中国主要城市成美网络秘密入侵目标，美国植入超5万个间谍程序！</title>
    <link href="https://blog.ihacker.top/archives/fefc6bf6d373.html"/>
    <id>https://blog.ihacker.top/archives/fefc6bf6d373.html</id>
    <published>2024-10-16T09:48:39.000Z</published>
    <updated>2024-10-31T09:29:55.747Z</updated>
    
    <content type="html"><![CDATA[<p><strong>10月14日，一则重磅消息再次引发了全球对网络安全的广泛关注：中国主要城市成为美国秘密网络入侵的重点目标，超过5万个间谍程序已被植入，企图窃取敏感信息。这一事件不仅揭露了美国网络间谍活动的深层次战略，还暴露出其在全球范围内推行网络战的真实意图。</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/%E4%B8%AD%E5%9B%BD%E4%B8%BB%E8%A6%81%E5%9F%8E%E5%B8%82%E6%88%90%E7%BE%8E%E7%BD%91%E7%BB%9C%E7%A7%98%E5%AF%86%E5%85%A5%E4%BE%B5%E7%9B%AE%E6%A0%87%EF%BC%8C%E7%BE%8E%E5%9B%BD%E6%A4%8D%E5%85%A5%E8%B6%855%E4%B8%87%E4%B8%AA%E9%97%B4%E8%B0%8D%E7%A8%8B%E5%BA%8F%EF%BC%81/19298008-e591d2899e9054aa.webp"                      alt="image.png"                ></p><p>这一网络入侵行动的起源可以追溯到美国国家安全局（NSA）的长期间谍计划。美方早在多年前便开始通过所谓的“伏特台风”行动，对外构建一种虚假叙事，抹黑目标国家，以此为掩护，实施一系列网络入侵与窃密活动。中国的国家计算机病毒应急处理中心已经连续发布了三次报告，详细披露了美方针对中国及其他国家的网络入侵活动。</p><p>报告不仅揭示了美国通过虚假信息进行的国际抹黑，还进一步展示了其在全球范围内实施网络间谍的恶意行为。报告显示，美国与“五眼联盟”国家通过网络监听、窃密，甚至在全球互联网设备中植入后门程序，伺机获取敏感信息。这一切正是由美国联邦政府精心策划和主导的网络战行动，旨在扰乱其他国家的网络安全环境。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/%E4%B8%AD%E5%9B%BD%E4%B8%BB%E8%A6%81%E5%9F%8E%E5%B8%82%E6%88%90%E7%BE%8E%E7%BD%91%E7%BB%9C%E7%A7%98%E5%AF%86%E5%85%A5%E4%BE%B5%E7%9B%AE%E6%A0%87%EF%BC%8C%E7%BE%8E%E5%9B%BD%E6%A4%8D%E5%85%A5%E8%B6%855%E4%B8%87%E4%B8%AA%E9%97%B4%E8%B0%8D%E7%A8%8B%E5%BA%8F%EF%BC%81/19298008-5277cd418619f50b.webp"                      alt="image.png"                ></p><p>美国在网络空间中采取的策略非常明确，其核心是“防御前置”战略。简单来说，就是在对手国家的周边地区提前部署网络战部队，进行网络侦察和渗透。美国情报机构甚至为此开发了专门的隐身工具，代号“大理石”，这一“工具包”可以掩盖其恶意攻击行为，将责任嫁祸给他国，从而在全球范围内制造混乱。</p><p>这场由美方发起的网络战不仅仅是针对某一个国家，而是对全球互联网用户的无差别攻击。通过植入间谍程序，美国能够对目标国的互联网资产进行大规模入侵，获取情报。据报告显示，中国境内的多个主要城市，包括西北工业大学和武汉市地震监测中心，已经成为其重点目标。被植入的间谍程序数量超过5万个，这意味着大量的敏感数据已被美国窃取，甚至在全球范围内也实施了类似的操作。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/%E4%B8%AD%E5%9B%BD%E4%B8%BB%E8%A6%81%E5%9F%8E%E5%B8%82%E6%88%90%E7%BE%8E%E7%BD%91%E7%BB%9C%E7%A7%98%E5%AF%86%E5%85%A5%E4%BE%B5%E7%9B%AE%E6%A0%87%EF%BC%8C%E7%BE%8E%E5%9B%BD%E6%A4%8D%E5%85%A5%E8%B6%855%E4%B8%87%E4%B8%AA%E9%97%B4%E8%B0%8D%E7%A8%8B%E5%BA%8F%EF%BC%81/19298008-fcd5749f0aa4325f.webp"                      alt="image.png"                ></p><p>美国的网络间谍活动不仅限于中国，还涉及包括德国在内的多个国家。美国的监听手段无孔不入，几乎每一个国家都成为了其网络攻击的目标。对于普通的全球互联网用户来说，他们的个人隐私和数据安全同样受到了巨大的威胁。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/%E4%B8%AD%E5%9B%BD%E4%B8%BB%E8%A6%81%E5%9F%8E%E5%B8%82%E6%88%90%E7%BE%8E%E7%BD%91%E7%BB%9C%E7%A7%98%E5%AF%86%E5%85%A5%E4%BE%B5%E7%9B%AE%E6%A0%87%EF%BC%8C%E7%BE%8E%E5%9B%BD%E6%A4%8D%E5%85%A5%E8%B6%855%E4%B8%87%E4%B8%AA%E9%97%B4%E8%B0%8D%E7%A8%8B%E5%BA%8F%EF%BC%81/19298008-d325c9de025a4c77.webp"                      alt="image.png"                ></p><p>这一系列事件的曝光，揭示了全球网络安全形势的严峻性。美国的无差别监听行为，已经让各国的互联网基础设施面临前所未有的风险。从网络设备到基础设施，美国通过各种“供应链”攻击手段，在设备中植入后门，实施长期监控。对于中国这样的互联网大国而言，网络安全的维护显得尤为重要。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/%E4%B8%AD%E5%9B%BD%E4%B8%BB%E8%A6%81%E5%9F%8E%E5%B8%82%E6%88%90%E7%BE%8E%E7%BD%91%E7%BB%9C%E7%A7%98%E5%AF%86%E5%85%A5%E4%BE%B5%E7%9B%AE%E6%A0%87%EF%BC%8C%E7%BE%8E%E5%9B%BD%E6%A4%8D%E5%85%A5%E8%B6%855%E4%B8%87%E4%B8%AA%E9%97%B4%E8%B0%8D%E7%A8%8B%E5%BA%8F%EF%BC%81/19298008-a2244442a0cc01d8.webp"                      alt="image.png"                ></p><p>随着事件的曝光，公众也开始更加关注自身的网络安全问题。许多网友纷纷表达了对这场网络战的担忧。一些网友感慨道：“到处都在被监控，网络世界就像别人的刀剑，防不胜防！”还有人表示：“为了防止被监听，我只用国产设备，支持华为！”</p><p>国产品牌的安全性在此次事件中得到了更多的支持与认可。华为等国产电子设备因其在技术和安全方面的创新，逐渐成为用户的首选。一些用户表示，正是因为这些品牌不参与美国主导的“供应链”攻击，他们才对这些设备更加信赖。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/uploads/images/%E4%B8%AD%E5%9B%BD%E4%B8%BB%E8%A6%81%E5%9F%8E%E5%B8%82%E6%88%90%E7%BE%8E%E7%BD%91%E7%BB%9C%E7%A7%98%E5%AF%86%E5%85%A5%E4%BE%B5%E7%9B%AE%E6%A0%87%EF%BC%8C%E7%BE%8E%E5%9B%BD%E6%A4%8D%E5%85%A5%E8%B6%855%E4%B8%87%E4%B8%AA%E9%97%B4%E8%B0%8D%E7%A8%8B%E5%BA%8F%EF%BC%81/19298008-4471a6bff192a411.webp"                      alt="image.png"                ></p><p>中国主要城市成为美国网络间谍行动的重点目标，这一事实让全球网络安全问题再次进入公众视野。美国通过植入间谍程序、监听全球用户的做法，不仅侵害了国家安全，也威胁了个人隐私。各国亟需加强对网络安全的防范，防止类似事件的再次发生。</p><p>面对这一场无形的网络战争，全球互联网用户需要更加重视自己的网络安全，选择更加可靠和安全的设备。最终，只有通过科技进步和合作，全球网络安全形势才能真正得到改善。</p><blockquote><p>转自：<a class="link"   href="https://baijiahao.baidu.com/s?id=1812887092063073884&wfr=spider&for=pc" >https://baijiahao.baidu.com/s?id=1812887092063073884&amp;wfr=spider&amp;for=pc <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;10月14日，一则重磅消息再次引发了全球对网络安全的广泛关注：中国主要城市成为美国秘密网络入侵的重点目标，超过5万个间谍程序已被植入，企图窃取敏感信息。这一事件不仅揭露了美国网络间谍活动的深层次战略，还暴露出其在全球范围内推行网络战的真实意图。&lt;/stron</summary>
      
    
    
    
    <category term="安全资讯" scheme="https://blog.ihacker.top/categories/%E5%AE%89%E5%85%A8%E8%B5%84%E8%AE%AF/"/>
    
    
    <category term="间谍程序" scheme="https://blog.ihacker.top/tags/%E9%97%B4%E8%B0%8D%E7%A8%8B%E5%BA%8F/"/>
    
    <category term="网络入侵" scheme="https://blog.ihacker.top/tags/%E7%BD%91%E7%BB%9C%E5%85%A5%E4%BE%B5/"/>
    
  </entry>
  
</feed>
